<?php

/**
 * Implements hook_schema
 */
function smartdocs_schema() {
  $schema['cache_smartdocs'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['smartdata'] = array(
    'description' => 'Provides all of the necessary data for smartdocs.',
    'fields' => array(
      'sid' => array(
        'description' => 'SmartDocs Drupal ID',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'Node associated with the SmartDoc',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'revision' => array(
        'description' => 'Revision associated with the SmartDoc',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'resource' => array(
        'description' => 'Resource Associated with the SmartDoc',
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'method' => array(
        'description' => 'Method Associated with the SmartDoc',
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'model' => array(
        'description' => 'Model Associated with the SmartDoc',
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'synced' => array(
        'description' => 'Sync Drupal node with SmartDocs',
        'type' => 'int',
        'default' => 1,
      ),
      'mpid' => array(
        'description' => 'add a SmartDocs Method ID based on full method URL path',
        'type' => 'varchar',
        'length' => 256,
      ),
    ),
    'primary key' => array('sid'),
  );
  return $schema;
}


/**
 * Implements hook_requirements
 *
 * @param $phase
 * @return array
 */
function smartdocs_requirements($phase) {
  $result = array();
  $t = get_t();
  switch ($phase) {
    case 'install':
      if (module_exists('devconnect_docgen')) {
        $result['smartdocs_docgen'] = array(
          'severity' => REQUIREMENT_ERROR,
          'title' => 'SmartDocs',
          'value' => $t(' (beta).  Please disable SmartDocs (beta) before enabling the full version.'),
        );
        return $result;
      }
      if (defined('MAINTENANCE_MODE') && (MAINTENANCE_MODE == 'install')) {
        return $result;
      }
      break;
    default:
      break;
  }
  return $result;
}

/**
 * Implements hook_install().
 *
 * Sets pathauto settings to match Smartdocs requirements.
 */
function smartdocs_install() {
	if (db_table_exists('smartdocs')) {
		$query = db_select('smartdocs', 's');
		$query->fields('s', array('sid', 'nid', 'revision', 'resource', 'method', 'model', 'synced', 'mpid'));
		$result = $query->execute();
		foreach ($result as $row) {
			$record = array (
				'nid' =>  $row->nid,
				'revision' => $row->revision,
				'resource' => $row->resource,
				'method' => $row->method,
				'model' => $row->model,
				'synced' => $row->synced,
				'mpid' => $row->mpid,
			);
			drupal_write_record('smartdata', $record);
		}
	}
	if (module_exists('devconnect_docgen')) {
		module_disable(array('devconnect_docgen'));
		db_drop_table('smartdocs');
		db_drop_table('cache_docgen');
	}
  variable_set('pathauto_max_length', 255);
  variable_set('pathauto_max_component_length', 255);
  variable_set('pathauto_punctuation_left_curly', 2);
  variable_set('pathauto_punctuation_right_curly', 2);
}
