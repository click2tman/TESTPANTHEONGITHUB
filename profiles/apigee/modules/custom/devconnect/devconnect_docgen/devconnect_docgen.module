<?php

/**
 * @file: DevConnect Document Generation Module
 * @about: Module that creates Drupal entities based off of the Apigee Modeling API.
 *
 * @author: Brian Hasselbeck <bhasselbeck@apigee.com>
 * @version: v1.0
 */

define('SMARTDOCS_CSS_B2', 'https://smartdocs.apigee.com/3/static/css/main.css
https://smartdocs.apigee.com/3/static/css/codemirror.css
https://smartdocs.apigee.com/3/static/css/prism.css');

define('SMARTDOCS_JS_B2', "https://smartdocs.apigee.com/3/static/js/codemirror.js
https://smartdocs.apigee.com/3/static/js/codemirror_javascript.js
https://smartdocs.apigee.com/3/static/js/codemirror_xml.js
https://smartdocs.apigee.com/3/static/js/prism.js
https://smartdocs.apigee.com/3/static/js/base64_min.js
https://smartdocs.apigee.com/3/static/js/model.js
https://smartdocs.apigee.com/3/static/js/controller.js");

define('SMARTDOCS_CSS_B3', 'https://smartdocs.apigee.com/3/static/css/main.css
https://smartdocs.apigee.com/3/static/css/codemirror.css
https://smartdocs.apigee.com/3/static/css/prism.css');

define('SMARTDOCS_JS_B3', "https://smartdocs.apigee.com/3/static/js/codemirror.js
https://smartdocs.apigee.com/3/static/js/codemirror_javascript.js
https://smartdocs.apigee.com/3/static/js/codemirror_xml.js
https://smartdocs.apigee.com/3/static/js/prism.js
https://smartdocs.apigee.com/3/static/js/base64_min.js
https://smartdocs.apigee.com/3/static/js/model.js
https://smartdocs.apigee.com/3/static/js/controller.js");

module_load_include('inc', 'devconnect_docgen', 'includes/devconnect_docgen.node_alter');

/**
 * Implements hook_init().
 */
function devconnect_docgen_init() {
  drupal_add_css(drupal_get_path('module', 'devconnect_docgen') . '/css/devconnect_docgen.css');
}

/**
 * Implements hook_menu().
 *
 * @return mixed
 */
function devconnect_docgen_menu() {
  $items['admin/content/smartdocs'] = array(
    'title' => t('SmartDocs (beta)'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_docgen_content'),
    'access arguments' => array('administer smartdocs content'),
  );
  $items['admin/content/smartdocs/models'] = array(
    'title' => 'Models',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_docgen_models_redirect'),
    'access arguments' => array('administer smartdocs content'),
    'type' => MENU_LOCAL_ACTION
  );
  $items['admin/content/smartdocs/add-model'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_docgen_add_content'),
    'access arguments' => array('administer smartdocs content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  $items['admin/content/smartdocs/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_docgen_settings'),
    'access arguments' => array('administer smartdocs content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -0,
  );
  $models = entity_load('docgen_model');
  if (!empty($models)) {
    foreach(entity_load('docgen_model') as $model) {
      if (isset($model['name'])) {
        $items['admin/content/smartdocs/list/'.$model['name'].'/detail'] = array(
          'title' => (isset($model['displayName'])) ? $model['displayName'] : $model['name'],
          'page callback' => 'drupal_get_form',
          'type' => MENU_LOCAL_TASK,
          'page arguments' => array('devconnect_docgen_model_detail', 4),
          'access arguments' => array('administer smartdocs content'),
          'weight' => -4,
        );
        $items['admin/content/smartdocs/settings/' . $model['name']] = array(
          'title' => (isset($model['displayName'])) ? $model['displayName'] : $model['name'],
          'page callback' => 'drupal_get_form',
          'type' => MENU_LOCAL_TASK,
          'page arguments' => array('devconnect_docgen_settings', 4),
          'access arguments' => array('administer smartdocs content'),
          'weight' => -4,
        );
      }
    }
  }
  $items['admin/content/smartdocs/list'] = array(
    'title' => 'Models',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/content/smartdocs/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_docgen_import_content'),
    'access arguments' => array('administer smartdocs content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -0,
  );
  $items['admin/content/smartdocs/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_docgen_export_file'),
    'access arguments' => array('administer smartdocs content'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -1,
  );
  $items['v1/api/smartdocs/update/%'] = array(
    'page callback' => 'devconnect_docgen_api_update',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/devconnect_docgen.node_alter.inc'
  );
  $items['smartdocs/oauth/callback'] = array(
    'title' => 'Authorizing',
    'page callback' => 'devconnect_docgen_oauth_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_flush_caches().
 *
 * @return array
 */
function devconnect_docgen_flush_caches() {
  return array('cache_docgen');
}

/**
 * Implements the oauth callback
 */
function devconnect_docgen_oauth_callback() {
  $config =& devconnect_get_org_settings();
  return theme('devconnect_docgen_callback', array(
    'proxy' => str_replace('v1/smartdocs','smartdocs/v1/sendrequest', variable_get('api_proxy_url', 'https://apiconsole-prod.apigee.net/v1/smartdocs')),
    'endpoint' => $config['endpoint'],
  ));
}

/**
 * Check the sanity of the post data
 *
 * @param $string
 * @return bool
 */
function smartdocs_is_json($string) {
  json_decode($string);
  return (json_last_error() == JSON_ERROR_NONE);
}

/**
 * Quick redirect for the models link
 */
function devconnect_docgen_models_redirect() {
  drupal_goto('admin/content/smartdocs');
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function devconnect_docgen_permission() {
  return array(
    'administer smartdocs' => array(
      'title' => t('Administer DevConnect SmartDocs'),
      'description' => t('Perform administration tasks for Apigee SmartDocs.'),
    ),
    'administer smartdocs content' => array(
      'title' => t('Administer DevConnect SmartDocs Content'),
      'description' => t('Administer DevConnect SmartDocs Content.'),
    ),
  );
}

/**
 * Page callback for admin/content/smartdocs/settings.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function devconnect_docgen_settings($form, $form_state, $model = NULL) {
  if (!empty($model)) {
    drupal_set_title($model . ' Settings');
    $ver = variable_get(_devconnect_docgen_model_name($model) . '_bootstrap_ver', '0');
    $form[$model . '_bootstrap_ver'] = array(
      '#type' => 'select',
      '#title' => t('Bootstrap Version'),
      '#options' => array(
        '0' => 'none',
        '2' => '2.3.2',
        '3' => '3',
      ),
      '#rows' => 5,
      '#default_value' => $ver,
    );
    switch($ver) {
      case '2':
        $def_js = SMARTDOCS_JS_B2;
        $def_css = SMARTDOCS_CSS_B2;
        break;
      case '3':
        $def_js = SMARTDOCS_JS_B3;
        $def_css = SMARTDOCS_CSS_B3;
        break;
      default:
        $def_js = SMARTDOCS_JS_B2;
        $def_css = SMARTDOCS_CSS_B2;
        break;
    }
    $form[_devconnect_docgen_model_name($model) . '_css'] = array(
      '#type' => 'textarea',
      '#title' => t('CSS Style Sheets'),
      '#rows' => 3,
      '#default_value' => variable_get(_devconnect_docgen_model_name($model) . '_css', $def_css),
    );
    $form[_devconnect_docgen_model_name($model) . '_js'] = array(
      '#type' => 'textarea',
      '#title' => t('JS Style Sheets'),
      '#rows' => 7,
      '#default_value' => variable_get(_devconnect_docgen_model_name($model) . '_js', $def_js),
    );
    $form['templates'] = array(
      '#type' => 'fieldset',
      '#title' => t('Template'),
      '#collapsed' => FALSE,
      '#collapsible' => TRUE,
    );
    $template = entity_get_controller('docgen_template')->loadTemplate($model, 'method');
    $form['templates'][$model][$model . '_method_template'] = array(
      '#type' => 'textarea',
      '#title' => t('Method Template'),
      '#rows' => 10,
      '#default_value' => $template,
      '#prefix' => '<div id="' . $model . '-wrapper">',
      '#suffix' => '</div>',
    );
    $form['templates'][$model]['method_save'] = array(
      '#type' => 'submit',
      '#value' => 'Save ' . $model . ' Template',
      '#submit' => array('_devconnect_docgen_method_save'),
      '#model' => $model,
      '#ajax' => array(
        'callback' => '_devconnect_docgen_method_callback',
        'wrapper' => $model . '-wrapper',
        'method' => 'replace',
        'effect' => 'fade',
        'progress' => array(
          'type' =>'throbber',
        )
      ),
    );
    _devconnect_docgen_oauth_form_elements($form, $form_state, _devconnect_docgen_model_name($model));
    return system_settings_form($form);
  } else {
    $form['cache_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Cache Settings for SmartDocs'),
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
    );
    $form['cache_settings']['clear_cache'] = array(
      '#type' => 'submit',
      '#value' => t('Clear SmartDocs HTML Caches'),
      '#submit' => array('devconnect_docgen_clear_caches')
    );
    $form['settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced Settings'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );
    $form['settings']['use_docgen_templates'] = array(
      '#type' => 'checkbox',
      '#disabled' => TRUE,
      '#title' => t('Use Modeling Template System'),
      '#default_value' => variable_get('use_docgen_templates', 1),
      '#description' => t('By enabling this setting, you will override all node templates with model templates.'),
      '#suffix' => '<br/>',
    );
    $form['settings']['api_proxy'] = array(
      '#type' => 'fieldset',
      '#title' => t('Management API Override Settings'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );
    $form['settings']['api_proxy']['use_local_assets'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Local SmartDocs JS/CSS'),
      '#default_value' => variable_get('use_local_assets', 0),
      '#description' => t('By enabling this setting, you will use local assets hosted by DevPortal.'),
      '#suffix' => '<br/>',
    );
    $form['settings']['api_proxy']['use_api_proxy_url'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Management API URL Override'),
      '#default_value' => variable_get('use_api_proxy_url', 0),
      '#description' => t('By enabling this setting, you will override the default devportal endpoint for SmartDocs calls.'),
      '#suffix' => '<br/>',
    );
    $form['settings']['api_proxy']['api_proxy_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Management API URL Override'),
      '#default_value' => variable_get('api_proxy_url', 'https://api.enterprise.apigee.com/v1'),
    );
    return system_settings_form($form);
  }
}

/**
 * Adds OAuth form elements to any form
 *
 * @param $form
 * @param $form_state
 * @param $model: _devconnect_docgen_model_name($model);
 */
function _devconnect_docgen_oauth_form_elements(&$form, &$form_state, $model) {
  $form['oauth'] = array(
    '#type' => 'fieldset',
    '#title' => t('OAuth 2.0 Web Server Flow'),
    '#prefix' => '<div id="oauth-config">',
    '#suffix' => '</div>',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );
  $form['oauth'][$model][$model . '_oauth_20_webserver_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable OAuth'),
    '#default_value' => variable_get($model . '_oauth_20_webserver_enable'),
  );
  $form['oauth'][$model][$model . '_oauth_20_webserver_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Client ID'),
    '#default_value' => variable_get($model . '_oauth_20_webserver_client_id'),
  );
  $form['oauth'][$model][$model . '_oauth_20_webserver_client_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Secret'),
    '#default_value' => variable_get($model . '_oauth_20_webserver_client_secret'),
  );
  $form['oauth'][$model][$model . '_oauth_20_webserver_authorization_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Authorization URL'),
    '#default_value' => variable_get($model . '_oauth_20_webserver_authorization_url'),
  );
  $form['oauth'][$model][$model . '_oauth_20_webserver_authorization_verb'] = array(
    '#type' => 'radios',
    '#title' => t('Authorization Verb'),
    '#options' => array(
      'get' => 'GET',
      'post' => 'POST',
    ),
    '#default_value' => variable_get($model . '_oauth_20_webserver_authorization_verb'),
  );
  $form['oauth'][$model][$model . '_oauth_20_webserver_access_token_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Access Token URL'),
    '#default_value' => variable_get($model . '_oauth_20_webserver_access_token_url'),
  );
  $form['oauth'][$model][$model . '_oauth_20_webserver_access_token_type'] = array(
    '#type' => 'radios',
    '#title' => t('Access Token Type'),
    '#options' => array(
      'header' => 'Header',
      'query' => 'Query',
    ),
    '#default_value' => variable_get($model . '_oauth_20_webserver_access_token_type'),
  );
  $form['oauth'][$model][$model . '_oauth_20_webserver_param_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Access Token param name'),
    '#default_value' => variable_get($model . '_oauth_20_webserver_param_name'),
  );
  $form['oauth'][$model][$model . '_oauth_20_webserver_client_authentication_name'] = array(
    '#type' => 'radios',
    '#title' => t('Client Authentication Name'),
    '#options' => array(
      'header' => 'Header',
      'body' => 'Body',
    ),
    '#default_value' => variable_get($model . '_oauth_20_webserver_client_authentication_name'),
  );
}

/**
 * Submit Callback for Model Template.
 *
 * @param $form
 * @param $form_state
 */
function _devconnect_docgen_method_save($form, &$form_state) {
  $form_state['storage']['ajaxed'] = TRUE;
  $name = $form_state['clicked_button']['#model'];
  $models = entity_load('docgen_model');
  foreach($models as $model) {
    if ($name == $model['name']) {
      try {
        $html = $form_state['values'][$model['name'] . '_method_template'];
        if ($save = entity_get_controller('docgen_template')->updateTemplate($model['name'], 'method', $html)) {
          drupal_set_message('Template Saved. Cache cleared for the ' . $name . ' model.');
          $query = db_select('smartdocs', 's');
          $query->condition('s.model', $name);
          $query->fields('s', array('nid'));
          $results = $query->execute();
          foreach($results as $result) {
            cache_clear_all($result->nid, 'cache_docgen');
          }
          cache_clear_all('smartdocs', 'cache', TRUE);
        }
      } catch (Exception $e) {}
    }
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Ajax Callback for Model Template.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function _devconnect_docgen_method_callback($form, &$form_state) {
  $name = $form_state['clicked_button']['#model'];
  return $form['templates'][$name][$name . '_method_template'];
}

/**
 * Function that clears all of the method HTML caches for each model.
 *
 * @param $form
 * @param $form_state
 */
function devconnect_docgen_clear_caches(&$form, $form_state) {
  $models = variable_get('devconnect_docgen_content_types', array());
  foreach ($models as $machine => $model) {
    cache_clear_all(NULL, 'cache_docgen', TRUE);
    $query = db_select('smartdocs', 's');
    $query->fields('s', array('nid'));
    $results = $query->execute();
    foreach($results as $result) {
      cache_clear_all($result->nid, 'cache_docgen');
    }
  }
  drupal_set_message('SmartDocs Cache Cleared', 'status');
}

/**
 * Page callback for admin/content/models.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function devconnect_docgen_content($form, &$form_state) {
  if (isset($form_state['values']['operation']) && ($form_state['values']['operation'] == 'delete')) {
    $form['confirmed_delete'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['values'],
    );
    $form['#submit'][] = 'devconnect_docgen_content_confirm_submit';
    $ques = 'Are you sure?';
    $desc = 'Deleting any model will also delete it\'s corresponding content type and all of it\'s data.';
    return confirm_form($form, $ques, 'admin/content/smartdocs', $desc);
  }
  $header = array(
    'name' => t('Model Name'),
    'description' => t('Description'),
    'tags' => t('Tags'),
    'attributes' => t('Attributes'),
  );
  $entities = entity_load('docgen_model');
  foreach($entities as $entity) {
    $types[] = $entity['name'];
    if (isset($entity['displayName'])) {
      $link = $entity['displayName'];
    } else {
      $link = $entity['name'];
    }
    $options[$entity['name']] = array (
      'name' => l($link, 'admin/content/smartdocs/list/' . $entity['name'] . '/detail'),
      'description' => (isset($entity['description'])) ? check_plain($entity['description']) : '',
      'tags' => (isset($entity['tags'])) ? $entity['tags'] : '',
      'attributes' => (isset($entity['customAttributes'])) ? $entity['customAttributes'] : '',
    );
  }
  if (isset($types)) {
    foreach($types as $type) {
      if (!in_array($type, array_keys(variable_get('devconnect_docgen_content_types', array())))) {
        $rebuild = TRUE;
      }
    }
  }
  if (isset($rebuild) && $rebuild) {
    menu_rebuild();
  }
  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update options'),
    '#attributes' => array('class' => array('container-inline')),
    '#access' => array('administer smartdocs content'),
  );
  $form['options']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#title_display' => 'invisible',
    '#options' => array(
      'delete' => t('Delete selected models'),
    ),
    '#default_value' => 'approve',
  );
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );
  $form['model_table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => (isset($options)) ? $options : array(),
    '#empty' => t('No models found'),
  );
  return $form;
}

/**
 * Submit Callback for devconnect_docgen_content().
 *
 * @param $form
 * @param $form_state
 */
function devconnect_docgen_content_confirm_submit($form, &$form_state) {
  switch($form_state['values']['confirmed_delete']['operation']) {
    case 'delete':
      $form_state['rebuild'] = TRUE;
      foreach($form_state['values']['confirmed_delete']['model_table'] as $id => $model) {
        if (!is_null($model) && $model != '0') {
          try {
            entity_get_controller('docgen_model')->delete($model);
            if (variable_get(_devconnect_docgen_model_name($model) . '_nodes', null)) {
              variable_del(_devconnect_docgen_model_name($model) . '_nodes');
              variable_del(_devconnect_docgen_model_name($model));
            }
            if (variable_get('devconnect_docgen_content_types', array())) {
              $models = variable_get('devconnect_docgen_content_types', array());
              $types = array();
              foreach ($models as $display => $type) {
                if ($type != _devconnect_docgen_model_name($model)) {
                  $types[$display] = $type;
                }
              }
              variable_set('devconnect_docgen_content_types', $types);
            }
            $results = db_select('node', 'n')
              ->fields('n', array('nid'))
              ->condition('type', _devconnect_docgen_model_name($model))
              ->execute();
            foreach ($results as $result) {
              $nids[] = $result->nid;

              // Delete Smartdocs row..  TODO: delete with entity_delete
              db_delete('smartdocs')
                ->condition('nid', $result->nid)
                ->execute();
            }
            (!empty($nids)) ? node_delete_multiple($nids) : null;
            $update = db_update('node_type')->fields(array('custom' => 1,'modified' => 1,'locked' => 0))
              ->condition('type', _devconnect_docgen_model_name($model))->execute();
            ($update) ? node_type_delete(_devconnect_docgen_model_name($model)) : null;
            $vocabs = array( 'tags', 'auth_schemes', 'methods', 'revisions', 'types');
            foreach ($vocabs as $machine) {
              $tax_machine = taxonomy_vocabulary_machine_name_load(_devconnect_docgen_model_name($model) . '_' . $machine);
              if (is_object($tax_machine) && $vid = $tax_machine->vid) {
                foreach (taxonomy_get_tree($vid) as $term) {
                  taxonomy_term_delete($term->tid);
                }
                taxonomy_vocabulary_delete($vid);
              }
            }
            $fid = db_query("SELECT fid FROM {file_managed} WHERE filename=:name", array(':name' => _devconnect_docgen_model_name($model) . '_listing.view'))->fetchField();
            if ($fid) {
              $file = file_load($fid);
              file_delete($file);
            }
            menu_rebuild();
            drupal_set_message(t('%model has been deleted and all of it\'s associated content.', array('%model' => $model)), 'status');
          } catch (Exception $e) {
            drupal_set_message('There was an error deleting the model(s).', 'error');
          }
        }
      }
      break;
    default;
      break;
  }
}

/**
 * Submit Callback for devconnect_docgen_content().
 *
 * @param $form
 * @param $form_state
 */
function devconnect_docgen_content_submit($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit function for devconnect_docgen_model_templates().
 *
 * @param $form
 * @param $form_state
 */
function devconnect_docgen_model_templates_submit($form, &$form_state) {
  $types = array('method', 'index');
  $success = TRUE;
  foreach($types as $type) {
    $html = $form_state['values']['devconnect_'.$form_state['values']['mid'].'_' . $type . '_template'];
    try{
      entity_get_controller('docgen_template')->saveTemplate($form_state['values']['mid'], $type, $html);
      try {
        variable_set('devconnect_'.$form_state['values']['mid'].'_' . $type .'_template', $html);
      } catch (Exception $e) {
        drupal_set_message('Could not clear the cache for the ' . $form_state['values']['mid'] . ' model.', 'error');
        $success = FALSE;
      }
    } catch (Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
      $success = FALSE;
    }
  }
  if ($success) {
    drupal_set_message('Configuration has been saved.', 'status');
  } else {
    drupal_set_message('Configuration could not be saved', 'error');
  }
}

/**
 * Page Callback for devconnect_docgen_model_detail().
 *
 * @param $form
 * @param $form_state
 * @param $mid
 * @return mixed
 */
function devconnect_docgen_model_detail($form, &$form_state, $mid) {
  global $base_url;
  if (isset($form_state['values']['operation']) && ($form_state['values']['operation'] == 'render_nodes')) {
    $form['render_verbose'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['values']['verbose'],
    );
    $form['render_mid'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['values']['mid'],
    );
    $form['render_operation'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['values']['operation'],
    );
    $form['render_api_model_table'] = array(
      '#type' => 'hidden',
      '#value' => drupal_json_encode($form_state['values']['api_model_table']),
    );
    $form['render_options'] = array(
      '#title' => t('Rendering options:'),
      '#type' => 'checkboxes',
      '#options' => array(
        'publish' => t('Publish nodes immediately.'),
      ),
      '#default_value' => array(
        'render_menu',
      )
    );
    $ver = variable_get($form_state['values']['mid'] . '_bootstrap_ver', '0');
    switch($ver) {
      case '2':
        $form['bootstrap_settings']['bootstrap_version'] = array(
          '#type' => 'hidden',
          '#value' => '3',
        );
        break;
      case '3':
        $form['bootstrap_settings']['bootstrap_version'] = array(
          '#type' => 'hidden',
          '#value' => '3',
        );
        break;
      default:
        $form['bootstrap_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Drupal Specific Template Settings %o', array('%o' => '(optional)')),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );
        $form['bootstrap_settings']['bootstrap_version'] = array(
          '#type' => 'select',
          '#title' => t('Bootstrap Version'),
          '#options' => array(
            '0' => 'none',
            '2' => '2.3.2',
            '3' => '3',
          ),
          '#default_value' => '0',
          '#description' => t('If you are using bootstrap, please select the version.'),
        );
        break;
    }
    $form['options']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Render Nodes'),
    );
    return $form;
  }

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update options'),
    '#attributes' => array('class' => array('container-inline')),
    '#access' => array('administer smartdocs content'),
  );
  $header = array(
    'tax' => t('Taxonomy'),
    'path' => t('Path'),
    'name' => t('Name'),
    'description' => t('Description'),
    'method' => t('Method'),
    'auth' => t('Authentication'),
    'node' => t('Node Association'),
    'status' => t('Published'),
    'synced' => t('Synced'),
  );
  $model = entity_get_controller('docgen_model')->loadSingle($mid);
  $revisions = entity_get_controller('docgen_revision')->getAllRevisions($mid);
  foreach($revisions as $revision) {
    $model['revisions'][$revision['revisionNumber']] = $revision;
  }
  $nodes = variable_get(_devconnect_docgen_model_name($mid) . '_nodes', array());
  $operations_options['render_nodes'] = t('Render Nodes');
  if (!empty($nodes)) {
    $operations_options['publish_nodes'] = t('Publish Nodes');
    $operations_options['unpublish_nodes'] = t('Unpublish Nodes');
    $operations_options['sync_nodes'] = t('Sync Nodes to SmartDocs');
  }
  $form['options']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#title_display' => 'invisible',
    '#options' => $operations_options,
    '#default_value' => 'approve',
  );
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );
  $config =& devconnect_get_org_settings();
  if (isset($model['revisions'])) {
    $revision = array();
    if (!(isset($_GET['rev']))) {
      $model['revisions'][$model['latestRevisionNumber']] = entity_get_controller('docgen_revision')->loadVerbose($mid, $model['latestRevisionNumber']);
      $revision = array($model['revisions'][$model['latestRevisionNumber']]);
      $oauth = variable_get(_devconnect_docgen_model_name($model['name']) . '_oauth_20_webserver_callback_url_' . $model['latestRevisionNumber'], null);
      if (!is_null($oauth)) {
        $form['options']['oauth_info'] = array(
          '#prefix' => '<br><br>',
          '#type' => 'fieldset',
          '#title' => t('OAuth Information'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );
        $form['options']['oauth_info']['callback'] = array(
          '#markup' => $oauth,
        );
      }
    } else {
      if (is_numeric($_GET['rev'])) {
        if (isset($model['revisions'][$_GET['rev']])) {
          $model['revisions'][$_GET['rev']] = entity_get_controller('docgen_revision')->loadVerbose($mid, $_GET['rev']);
          $revision = array($model['revisions'][$_GET['rev']]);
          $oauth = variable_get(_devconnect_docgen_model_name($model['name']) . '_oauth_20_webserver_callback_url_' . $_GET['rev']);
          if (!is_null($oauth)) {
            $form['options']['oauth_info'] = array(
              '#prefix' => '<br><br>',
              '#type' => 'fieldset',
              '#title' => t('OAuth Information'),
              '#collapsible' => TRUE,
              '#collapsed' => TRUE,
            );
            $form['options']['oauth_info']['info'] = array(
              '#markup' => $oauth,
            );
          }
        }
      } else {
        drupal_set_message('The revision is not a numeric value.', 'error');
      }
    }
    foreach($revision as $entity) {
      if (isset($model['displayName'])) {
        $entity['displayName'] = $model['displayName'];
      }
      $entity['name'] = $model['name'];
      $form['verbose'] = array(
        '#type' => 'hidden',
        '#value' => drupal_json_encode($entity),
      );
      $form['mid'] = array(
        '#type' => 'hidden',
        '#value' => $mid,
      );
      $form[$entity['revisionNumber']] = array(
        '#type' => 'fieldset',
        '#title' => t(' %r: ' . $entity['baseUrl'], array('%r' => 'Revision: #' . $entity['revisionNumber'])),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      if (is_array($entity['resources'])) {
        $url = parse_url($entity['baseUrl']);
        if (isset($url['path'])) {
          $path = $url['host'] . $url['path'];
        } else {
          $path = $url['host'];
        }
        $tags = array();
        foreach ($entity['resources'] as $resource) {
          if (substr($resource['path'], 0, 1) == '/') {
            $resource['path'] = $path . $resource['path'];
          } else {
            $resource['path'] = $path . '/' . $resource['path'];
          }
          $resource['path'] = $url['scheme'] . '://' . str_replace('//', '/', $resource['path']);
          if (isset($resource['methods']) && is_array($resource['methods'])) {
            foreach ($resource['methods'] as $operation) {
              if (isset($operation['tags']) && is_array($operation['tags']) && !empty($operation['tags'])) {
                foreach($operation['tags'] as $tag) {
                  $tags[$operation['id']][$operation['name']]['tags'] = $operation['tags'];
                  $tags[$operation['id']][$operation['name']]['verb'] = $operation['verb'];
                  $tags[$operation['id']][$operation['name']]['name'] = $operation['name'];
                  if (isset($operation['displayName'])) {
                    $tags[$operation['id']][$operation['name']]['displayName'] = $operation['displayName'];
                  }
                  if (isset($operation['description'])) {
                    $tags[$operation['id']][$operation['name']]['description'] = check_plain($operation['description']);
                  }
                  $tags[$operation['id']][$operation['name']]['resources'][$resource['id']]['name'] = $resource['name'];
                  $tags[$operation['id']][$operation['name']]['resources'][$resource['id']]['path'] = $resource['path'];
                  if (isset($operation['authSchemes'])) {
                    foreach($operation['authSchemes'] as $auth) {
                      $tags[$operation['id']][$operation['name']]['authSchemes'][$auth] = $auth;
                    }
                  }
                }
              } else {
                $tags[$operation['id']][$operation['name']]['verb'] = $operation['verb'];
                $tags[$operation['id']][$operation['name']]['name'] = $operation['name'];
                if (isset($operation['displayName'])) {
                  $tags[$operation['id']][$operation['name']]['displayName'] = $operation['displayName'];
                }
                if (isset($operation['description'])) {
                  $tags[$operation['id']][$operation['name']]['description'] = check_plain($operation['description']);
                }
                $tags[$operation['id']][$operation['name']]['resources'][$resource['id']]['name'] = $resource['name'];
                $tags[$operation['id']][$operation['name']]['resources'][$resource['id']]['path'] = $resource['path'];
                if (isset($operation['authSchemes'])) {
                  foreach($operation['authSchemes'] as $auth) {
                    $tags[$operation['id']][$operation['name']]['authSchemes'][$auth] = $auth;
                  }
                }
              }
            }
          }
        }
        ksort($tags);
        $options = array();
        foreach ($tags as $tax => $tag) {
          foreach ($tag as $name => $property) {
            if (isset($property['resources']) && is_array($property['resources'])) {
              foreach ($property['resources'] as $key => $resources) {
                if (isset($nodes[$tax])) {
                  $node = (isset($nodes[$tax]) && !empty($nodes[$tax])) ? t('NID: %nid', array('%nid' => $nodes[$tax])) : '';
                  $status = db_query("SELECT status FROM {node} WHERE nid=:nid", array(':nid' => $nodes[$tax]))->fetchField();
                } else {
                  $status = 0;
                }
                if (in_array('OAUTH2WEBSERVER', $property['authSchemes'])) {
                  $form['options']['oauth_info'] = array(
                    '#prefix' => '<br><br>',
                    '#type' => 'fieldset',
                    '#title' => t('OAuth Information'),
                    '#collapsible' => TRUE,
                    '#collapsed' => TRUE,
                  );
                  $path = '/smartdocs/oauth/callback?org=' . $config['org']  . '&api=' . $mid .'&revision=' . $entity['revisionNumber'];
                  $form['options']['oauth_info']['info'] = array(
                    '#markup' => $base_url . $path,
                  );
                }

                $synced = 0;
                if(isset($nodes[$tax])) {
                  $synced = db_query("SELECT synced FROM {smartdocs} WHERE nid=:nid", array(':nid' => $nodes[$tax]))->fetchField();
                }

                $options[$tax] = array(
                  'tax' => (isset($property['tags'])) ? implode(', ', $property['tags']) : '',
                  'path' => array('data' => $resources['path'], 'class' => 'word-wrap'),
                  'name' => (isset($property['displayName'])) ? check_plain($property['displayName']) : check_plain($property['name']),
                  'description' => array('data' => (isset($property['description'])) ? $property['description'] : '', 'class' => array(
                    'description-field'
                  )),
                  'method' => $property['verb'],
                  'auth' => (isset($property['authSchemes'])) ? implode(', ', $property['authSchemes']) : '',
                  'node' => (isset($nodes[$tax]) && !empty($nodes[$tax])) ? l($node, 'node/' . $nodes[$tax], array(
                      'html' => TRUE,
                      'attributes' => array(
                        'target' => '_blank',
                      )
                    )) : '<span style="color:red;">No</span>',
                  'status' => ((bool)$status) ? '<span style="color:green;">Yes</span>' : '<span style="color:red;">No</span>',
                  'synced' => ((bool)$synced) ? '<span style="color:green;">Yes</span>' : '<span style="color:red;">No</span>',
                );
              }
            }
          }
        }
        _devconnect_docgen_detail_sort($options, 'tax');
        $form[$entity['revisionNumber']]['api_model_table'] = array(
          '#type' => 'tableselect',
          '#header' => $header,
          '#options' => $options,
          '#empty' => t('No Methods found'),
        );
      }
      break;
    }
    if (isset($model['revisions'])) {
      foreach($model['revisions'] as $entity) {
        $revs[$entity['revisionNumber']] = $entity['revisionNumber'];
      }
      ksort($revs);
      $rows = array();
      $form['options']['revisions_table'] = array(
        '#prefix' => (isset($form['options']['oauth_info'])) ? '' : '<br><br>',
        '#type' => 'fieldset',
        '#title' => t('Revision Select'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $i = 0;
      $len = count($revs);
      foreach ($revs as $revision) {
        if ((isset($_GET['rev']) && is_numeric($_GET['rev'])) && $_GET['rev'] == $revision) {
          $row = array(
            'Revision #' . $revision,
            'Revision Loaded',
          );
          $rows[] = $row;
          $form['options']['revisions_table']['#title'] = t('Revision Select %s' , array('%s' => '(Revision #' . $revision . ' is currently selected)'));
        } else {
          if (($i == $len - 1) && !isset($_GET['rev'])) {
            $row = array(
              'Revision #' . $revision,
              'Revision Loaded',
            );
            $rows[] = $row;
            $form['options']['revisions_table']['#title'] = t('Revision Select %s' , array('%s' => '(Revision #' . $revision . ' is currently selected)'));
          } else {
            $row = array(
              'Revision #' . $revision,
              l('Load Revision #' . $revision, 'admin/content/smartdocs/list/' . $mid .'/detail',
                array(
                  'query' => array(
                    'rev' => $revision
                  )
                )
              ),
            );
            $rows[] = $row;
          }
        }
        $i++;
      }
      $form['options']['revisions_table']['revision_select'] = array(
        '#markup' => theme(
          'table',
          array(
            'rows' => $rows,
            'attributes'=> array(),
            'caption' => '',
            'colgroups' => array(),
            'sticky' => false,
            'empty' => false,
          )
        )
      );
    }
  } else {
    $no = t('No Revisions found');
    $form['api_model_table'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => array(),
      '#empty' => $no . '. Start by ' . l('importing', 'admin/content/smartdocs/import', array(
          'query' => array(
            'mid' => $mid,
          )
        )) .
        ' data into the model.');
  }
  return $form;
}

/**
 * Sorting function for the details table.
 *
 * @param $array
 * @param $key
 */
function _devconnect_docgen_detail_sort(&$array, $key) {
  $sorter = array();
  $ret = array();
  reset($array);
  foreach($array as $ii => $va) {
    $sorter[$ii] = $va[$key];
  }
  asort($sorter);
  foreach($sorter as $ii => $va) {
    $ret[$ii] = $array[$ii];
  }
  $array = $ret;
}

/**
 * Submit Callback for devconnect_docgen_model_detail().
 *
 * @param $form
 * @param $form_state
 */
function devconnect_docgen_model_detail_submit($form, &$form_state) {
  module_load_include('inc', 'devconnect_docgen', 'includes/devconnect_docgen.batch_import');
  if (isset($form_state['input']['operation'])) {
    switch($form_state['input']['operation']) {
      case 'render_nodes':
        $form_state['rebuild'] = TRUE;
        break;
      case 'publish_nodes':
        $nodes = variable_get(_devconnect_docgen_model_name($form_state['input']['mid']) . '_nodes', array());
        foreach ($form_state['input']['api_model_table'] as $uuid => $import) {
          if (!is_null($import)) {
            if (isset($nodes[$uuid])) {
              $node = node_load($nodes[$uuid]);
              $node->status = 1;
              node_save($node);
            } else {
              drupal_set_message('The method you selected doesn\'t have an associated node.  Please render it first.', 'error');
            }
          }
        }
        break;
      case 'unpublish_nodes':
        $nodes = variable_get(_devconnect_docgen_model_name($form_state['input']['mid']) . '_nodes', array());
        foreach ($form_state['input']['api_model_table'] as $uuid => $import) {
          if (!is_null($import)) {
            if (isset($nodes[$uuid])) {
              $node = node_load($nodes[$uuid]);
              $node->status = 0;
              node_save($node);
            } else {
              drupal_set_message('The method you selected doesn\'t have an associated node.  Please render it first.', 'error');
            }
          }
        }
        break;
      case 'sync_nodes':
        $nodes = variable_get(_devconnect_docgen_model_name($form_state['input']['mid']) . '_nodes', array());
        foreach ($form_state['input']['api_model_table'] as $uuid => $import) {
          if (strlen($import) > 2) {
            if (isset($nodes[$uuid])) {
              drupal_set_message(t('Syncing method @uuid', array('@uuid' => $uuid)));
              devconnect_docgen_sync_api_update($uuid);
            }
          }
        }
        break;
      default;
        break;
    }
  } else {
    $options = $form_state['input']['render_options'];
    $verbose = drupal_json_decode($form_state['input']['render_verbose']);
    $table = drupal_json_decode($form_state['input']['render_api_model_table']);
    $bootstrap_ver = drupal_json_decode($form_state['input']['bootstrap_version']);
    $selected = array();
    foreach ($table as $import) {
      if (!is_null($import)) {
        $selected[] = $import;
      }
    }
    if (!empty($selected)) {
      batch_set(_devconnect_docgen_import_nodes($form_state['input']['render_mid'], $verbose, $selected, $options, $bootstrap_ver));
    } else {
      drupal_set_message('Please select the methods you would like to render.', 'error');
    }
  }
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function devconnect_docgen_theme($existing, $type, $theme, $path) {
  return array(
    'devconnect_docgen_param_table' => array(
      'render element' => 'element'
    ),
    'operation_template' => array(
      'variables' => array(
        'vars' => NULL,
        'mid' => NULL,
      ),
      'template' => 'operation'
    ),
    'devconnect_docgen_callback' => array(
      'variables' => NULL,
      'template' => 'devconnect-docgen-callback'
    )
  );
}

/**
 * Page callback for admin/content/smartdocs/add-model.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function devconnect_docgen_add_content($form, &$form_state) {
  $form['display_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Display Name'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  $form['model_name'] = array(
    '#type' => 'machine_name',
    '#machine_name' => array(
      'exists' => '_devconnect_docgen_model_exist',
    ),
  );
  $form['model_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#required' => TRUE,
  );
  $form['bootstrap_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bootstrap settings %o', array('%o' => '(optional)')),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['bootstrap_settings']['bootstrap_version'] = array(
    '#type' => 'select',
    '#title' => t('Version'),
    '#options' => array(
      '0' => 'none',
      '2' => '2.3.2',
      '3' => '3',
    ),
    '#default_value' => '3',
    '#description' => t('If you are using bootstrap, please select the version.'),
  );
  $form['model_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create Model')
  );
  $form['#submit'][] = 'devconnect_docgen_add_content_submit';
  return $form;
}

/**
 * Makes model name usable across the system.
 *
 * @param $model
 * @return string
 */
function _devconnect_docgen_model_name($model, $field = FALSE) {
  $data = &drupal_static(__FUNCTION__);
  if (!isset($data)) {
    $mid = strtolower(preg_replace(array(
      '/[^a-zA-Z0-9]+/',
      '/-+/',
      '/^-+/',
      '/-+$/',
    ), array('_', '_', '', ''), $model));
    $data = substr($mid, 0, 32);
    variable_set($model . '_content_type', $data);
  }
  return $data;
}

/**
 * Generates a unique field name (based off of the model) that is usable across the system.
 *
 * @param $model
 * @return string
 */
function _devconnect_docgen_model_field_name($model) {
  $data = &drupal_static(__FUNCTION__);
  if (!isset($data)) {
    $mid = strtolower(preg_replace(array(
      '/[^a-zA-Z0-9]+/',
      '/-+/',
      '/^-+/',
      '/-+$/',
    ), array('_', '_', '', ''), $model));
    $hash = hash('md4', preg_replace('/[^a-zA-Z0-9]/', '', $mid));
    if (strlen($mid) > 8) {
      $data = substr($mid, 0, 4) . substr($hash, -4);
    } else {
      $data = substr($mid, 0, 8);
    }
    variable_set($model . '_field_type', $data);
  }
  return $data;
}

/**
 * Function that checks if the model exists already.
 *
 * @param $name
 * @return bool
 */
function _devconnect_docgen_model_exist($name) {
  $docgen = entity_load('docgen_model');
  foreach($docgen as $model) {
    if ($model['name'] == _devconnect_docgen_model_name($name)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Submit Callback for devconnect_docgen_add_content()
 *
 * @param $form
 * @param $form_state
 */
function devconnect_docgen_add_content_submit($form, &$form_state) {
  $payload = array(
    'model_name' => trim($form_state['values']['model_name']),
    'display_name' => trim($form_state['values']['display_name']),
    'model_description' => trim($form_state['values']['model_description']),
  );
  try {
    if (entity_get_controller('docgen_model')->create($payload)) {
      variable_set(_devconnect_docgen_model_name($form_state['values']['model_name']), $form_state['values']['model_name']);
      if ($form_state['values']['bootstrap_version'] != 0) {
        $ver = $form_state['values']['bootstrap_version'];
        variable_set(trim($form_state['values']['model_name']) . '_bootstrap_ver', $ver);
        _devconnect_docgen_render_operation_template($payload['model_name'], $ver);
      } else {
        _devconnect_docgen_render_operation_template($payload['model_name']);
      }
    }
    $mid = trim($form_state['values']['model_name']);
    $form_state['redirect'] = array(
      'admin/content/smartdocs/import',
      array(
        'query' => array(
          'mid' => $mid,
        ),
      ),
    );
    drupal_set_message(t('The API Model %title has been created but contains no data. Import your data below.', array(
      '%title' => $form_state['values']['model_name'])), 'status');
    menu_rebuild();
  } catch (Exception $e) {
    drupal_set_message(t('There was an error when trying to create the model.'), 'error');
  }
}

/**
 * Updates the Model's operation template to use Drupal specific HTML and CSS.
 *
 * @param $apiId
 * @param bool $update
 * @param null $ver
 */
function _devconnect_docgen_render_operation_template($apiId, $ver = NULL) {
  switch($ver) {
    case '3':
      $html = file_get_contents(drupal_get_path('module', 'devconnect_docgen') . '/includes/bootstrap.3.html');
      break;
    default:
      $html = entity_get_controller('docgen_template')->loadDefaultTemplate($apiId, 'method');
  }
  try {
    entity_get_controller('docgen_template')->saveTemplate($apiId, 'method', $html);
  } catch (Exception $e) {
    watchdog(__FUNCTION__, $e->getCode() . ' ' . $e->getMessage(), array(), WATCHDOG_DEBUG);
  }
}

/**
 * Implements hook_node_delete().
 *
 * @param $node
 */
function devconnect_docgen_node_delete($node) {
  $nid = db_query('SELECT nid FROM {smartdocs} WHERE nid = :nid', array(':nid' => $node->nid))->fetchField();
  if (!empty($nid)) {
    $update = db_update('smartdocs')->fields(array('nid' => null))
      ->condition('nid', $node->nid)
      ->execute();
    if ($update) {
      drupal_set_message(t('The node %title has also been unsynced from the %type model.', array(
        '%title' => $node->title,
        '%type' => $node->type,
      )), 'warning');
    }
  }
}

/**
 * Ensures correct node association.
 *
 * @param $nid
 * @param $uuid
 * @param $nodes
 * @param $mid
 * @param $action
 */
function _devconnect_docgen_sync_nodes($nid, $uuid, $mid, $action) {
  $exists = variable_get(_devconnect_docgen_model_name($mid) . '_nodes', array());
  switch($action) {
    case 'delete':
      if (!empty($exists)) {
        $nids = array_flip($exists);
        unset($nids[$nid]);
        variable_set(_devconnect_docgen_model_name($mid) . '_nodes', array_flip($nids));
      }
      break;
    case 'create':
      $exists[$uuid] = $nid;
      variable_set(_devconnect_docgen_model_name($mid) . '_nodes', $exists);
      break;
  }
}

/**
 * Page callback for admin/content/smartdocs/export.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function devconnect_docgen_export_file($form, &$form_state) {
  $form = array();
  $options = entity_load('docgen_model');
  $choices = array();
  foreach ($options as $option) {
    $choices[$option['name']] = $option['displayName'];
  }
  if (!empty($choices)) {
    $form['model'] = array(
      '#type' => 'select',
      '#title' => t('Select a model'),
      '#options' => $choices,
      '#default_value' => '',
    );

    $options = array('json' => 'SmartDocs JSON', 'wadl' => 'WADL');
    $form['file_type'] = array(
      '#type' => 'select',
      '#title' => t('Select export file type'),
      '#options' => $options,
      '#default_value' => '',
    );

    $form['options']['submit_export'] = array(
      '#type' => 'submit',
      '#value' => t('Export'),
      '#prefix' => '<br>',
    );

    $form['#submit'][] = 'devconnect_docgen_export_file_submit';
  }
  return $form;
}

/**
 * Submit Callback for devconnect_docgen_export_file().
 *
 * @param $form
 * @param $form_state
 */
function devconnect_docgen_export_file_submit($form, &$form_state) {

  try {
    if ($form_state['input']['file_type'] == 'json') {
      $data = entity_get_controller('docgen_model')->export($form_state['input']['model'], 'json');
      $filename = $form_state['input']['model'] . '.json';
    }
    else {
      $data = entity_get_controller('docgen_model')->export($form_state['input']['model'], 'wadl');
      $filename = $form_state['input']['model'] . '.wadl';
    }

//    drupal_set_message(t('The model @model has been exported.', array('@model' => $form_state['input']['model'])), 'status');
  } catch (Exception $e) {
    drupal_set_message(t('There was an error exporting the model: @model', array('@model' => $form_state['input']['model'])), 'error');
    return;
  }

  $xexport_dir = 'public://wadls_export';
  file_prepare_directory($xexport_dir, FILE_CREATE_DIRECTORY);

  $destination = $xexport_dir . '/' . $filename;
  $replace = FILE_EXISTS_REPLACE;
  $my_file_obj = file_save_data($data, $destination, $replace);

  $headers = file_get_content_headers($my_file_obj);

  $headers['Content-Disposition'] = 'attachment; filename="' . $my_file_obj->filename . '"';
  file_transfer($my_file_obj->uri, $headers);
}

/**
 * Page callback for admin/content/smartdocs/import.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function devconnect_docgen_import_content($form, &$form_state) {
  $form = array();
  $options = entity_load('docgen_model');
  $choices = array();
  foreach ($options as $option) {
    $choices[$option['name']] = $option['displayName'];
  }
  if (!empty($choices)) {
    $keys = array_keys($choices);
    if (isset($_GET['mid']) && in_array($_GET['mid'], $keys)) {
      $default = $_GET['mid'];
    }
    $form['model'] = array(
      '#type' => 'select',
      '#title' => t('Select a model'),
      '#options' => $choices,
      '#default_value' => (isset($default)) ? $default : '',
      '#ajax' => array(
        'wrapper' => 'oauth-config',
        'effect' => 'fade',
        'callback' => '_devconnect_docgen_import_oauth_ajax',
        'progress' => array(
          'type' => 'throbber',
          'message' => 'Updating Authentication Settings...',
        ),
      ),
    );
    $form['format'] = array(
      '#prefix' => '<div id="import-format">',
      '#suffix' => '</div>',
      '#type' => 'fieldset',
      '#title' => t('Import Options'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['format']['type'] = array(
      '#type' => 'select',
      '#title' => t('Choose format'),
      '#options' => array(
        'wadl' => 'WADL File',
        'swagger' => 'Swagger',
        'apigee_json' => 'SmartDocs JSON',
      ),
      '#ajax' => array(
        'wrapper' => 'import-format',
        'callback' => '_devconnect_docgen_import_format_ajax',
      ),
      '#default_value' => array('wadl'),
    );
    if (isset($form_state['values']['type'])) {
      switch($form_state['values']['type']) {
        case 'swagger':
          $form['format']['import']['swagger_model_import'] = array(
            '#type' => 'textfield',
            '#title' => t('Swagger URL'),
            '#size' => 60,
            '#maxlength' => 128,
            '#default_value' => '',
            '#required' => TRUE,
          );
          break;
        default:
          if ($form_state['values']['type'] == 'wadl'){
            $name = 'WADL';
            $file_type = 'wadl';
            $file_extensions = 'xml wadl';
          } else {
            $name = 'SmartDocs JSON';
            $file_type = 'apigee_json';
            $file_extensions = 'js json';
          }

          $form['format']['import'][$file_type . '_type'] = array(
            '#type' => 'select',
            '#title' => t($name . ' Options'),
            '#options' => array(
              'upload' => 'Upload',
              'path' => 'URL Path',
            ),
            '#ajax' => array(
              'wrapper' => 'import-format',
              'callback' => '_devconnect_docgen_import_format_ajax',
            ),
            '#default_value' => array('upload'),
          );
          if (isset($form_state['values'][$file_type . '_type'])) {
            switch($form_state['values'][$file_type. '_type']) {
              case 'path':
                $form['format']['import'][$file_type . '_path_model_import'] = array(
                  '#type' => 'textfield',
                  '#title' => t($name . ' URL'),
                  '#size' => 60,
                  '#maxlength' => 128,
                  '#default_value' => '',
                  '#required' => TRUE,
                );
                break;
              default:
                $form['format']['import'][$file_type . '_upload_model_import'] = array(
                  '#type' => 'managed_file',
                  '#title' => t($name . ' File'),
                  '#description' => t('Allowed extensions: ' . $file_extensions),
                  '#upload_location' => 'public://wadls',
                  '#upload_validators' => array(
                    'file_validate_extensions' => array($file_extensions),
                  ),
                  '#required' => TRUE,
                );
                break;
            }
          } else {
            $form['format']['import'][$file_type . '_upload_model_import'] = array(
              '#type' => 'managed_file',
              '#title' => t($name . ' File'),
              '#description' => t('Allowed extensions: ' . $file_extensions),
              '#upload_location' => 'public://wadls',
              '#upload_validators' => array(
                'file_validate_extensions' => array($file_extensions),
              ),
              '#required' => TRUE,
            );
          }
          break;
      }
    } else {

      $json_upload = '';
      if (isset($form_state['input']['apigee_json_type'] )) {
        $json_upload = $form_state['input']['apigee_json_type'];
      }

      if ($json_upload == 'upload'){
        $name = 'SmartDocs JSON';
        $file_type = 'apigee_json';
        $file_extensions = 'js json';
      } else {
        $name = 'WADL';
        $file_type = 'wadl';
        $file_extensions = 'xml wadl';
      }

      $form['format']['import'][$file_type . '_type'] = array(
        '#type' => 'select',
        '#title' => t($name . ' Options'),
        '#options' => array(
          'upload' => 'Upload',
          'path' => 'URL Path',
        ),
        '#ajax' => array(
          'wrapper' => 'import-format',
          'callback' => '_devconnect_docgen_import_format_ajax',
        ),
        '#default_value' => array('upload'),
      );
      if (isset($form_state['values'][$file_type . '_type'])) {
        switch($form_state['values'][$file_type . '_type']) {
          case 'path':
            $form['format']['import'][$file_type . '_path_model_import'] = array(
              '#type' => 'textfield',
              '#title' => t($name . ' URL'),
              '#size' => 60,
              '#maxlength' => 128,
              '#default_value' => '',
              '#required' => TRUE,
            );
            break;
          default:
            $form['format']['import'][$file_type . '_upload_model_import'] = array(
              '#type' => 'managed_file',
              '#title' => t($name . ' File'),
              '#description' => t('Allowed extensions: ' . $file_extensions),
              '#upload_location' => 'public://wadls',
              '#upload_validators' => array(
                'file_validate_extensions' => array($file_extensions),
              ),
              '#required' => TRUE,
            );
            break;
        }
      } else {
        $form['format']['import'][$file_type . '_upload_model_import'] = array(
          '#type' => 'managed_file',
          '#title' => t($name . ' File'),
          '#description' => t('Allowed extensions: ' . $file_extensions),
          '#upload_location' => 'public://wadls',
          '#upload_validators' => array(
            'file_validate_extensions' => array($file_extensions),
          ),
          '#required' => TRUE,
        );
      }
    }
    if (isset($_GET['mid']) && in_array($_GET['mid'], $keys)) {
      $model = $_GET['mid'];
    } else {
      $model = (isset($form_state['input']['model'])) ? $form_state['input']['model'] : $options[0]['name'];
    }
    _devconnect_docgen_oauth_form_elements($form, $form_state, _devconnect_docgen_model_name($model));
    $form['oauth']['#title'] = t($choices[$model] . ' OAuth Configuration');
    $form['model_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Import')
    );
  } else {
    $form['create_model'] = array(
      '#markup' => 'In order to import documentation, you must first ' . l('create a model', 'admin/content/smartdocs/add-model') . '.',
    );
  }
  $form['#validate'][] = 'devconnect_docgen_import_content_validate';
  $form['#submit'][] = 'devconnect_docgen_import_content_submit';
  return $form;
}

/**
 * Validate function for model import
 */
function devconnect_docgen_import_content_validate($form, &$form_state) {
  switch($form_state['values']['type']) {
    case 'swagger':
      if (isset($form_state['values']['swagger_model_import'])) {
        if(filter_var($form_state['values']['swagger_model_import'], FILTER_VALIDATE_URL) === FALSE) {
          form_set_error('swagger_model_import', 'The swagger URL is not a valid URL.');
        }
      }
      break;
    case 'apigee_json':
      switch($form_state['values']['apigee_json_type']) {
        case 'path':
          if (isset($form_state['values']['apigee_json_path_model_import'])) {
            if(filter_var($form_state['values']['apigee_json_path_model_import'], FILTER_VALIDATE_URL) === FALSE) {
              form_set_error('apigee_json_path_model_import', 'The SmartDocs JSON URL is not a valid URL.');
            }
          }
          break;
        default:
          break;
      }
      break;
    default:
      switch($form_state['values']['wadl_type']) {
        case 'path':
          if (isset($form_state['values']['wadl_path_model_import'])) {
            if(filter_var($form_state['values']['wadl_path_model_import'], FILTER_VALIDATE_URL) === FALSE) {
              form_set_error('wadl_path_model_import', 'The WADL URL is not a valid URL.');
            }
          }
          break;
        default:
          break;
      }
      break;
  }
  $model = $form_state['input']['model'];
  $correct = FALSE;
  if (isset($form_state['input'][$model . '_oauth_20_webserver_enable'])) {
    $correct = TRUE;
  }
  if (!$correct) {
    if (isset($form_state['input'][$model . '_oauth_20_webserver_enable'])) {
      if ((bool)$form_state['input'][$model . '_oauth_20_webserver_enable']) {
        form_set_error('model', 'There was an error in loading the correct model.  Please reselect ' . $model . ' to update the form.');
      }
    }
  }
}

/**
 * Ajax callback for import format
 */
function _devconnect_docgen_import_format_ajax($form, &$form_state) {
  $form['#rebuild'] = TRUE;
  return $form['format'];
}

/**
 * Ajax callback for import format
 */
function _devconnect_docgen_import_oauth_ajax($form, &$form_state) {
  $form['#rebuild'] = TRUE;
  return $form['oauth'];
}

/**
 * Submit Callback for devconnect_docgen_import_content().
 *
 * @param $form
 * @param $form_state
 */
function devconnect_docgen_import_content_submit($form, &$form_state) {
  global $base_url;
  $entity = array();
  $entity['apiId'] = $form_state['values']['model'];
  switch($form_state['values']['type']) {
    case 'swagger':
      $entity['url'] = $form_state['values']['swagger_model_import'];
      try {
        entity_get_controller('docgen_model')->import($entity, 'swagger');
        drupal_set_message('The Swagger data has been imported into the model.', 'status');
        $form_state['redirect'] = 'admin/content/smartdocs/list/' . $form_state['values']['model'] .'/detail';
      } catch (Exception $e) {
        drupal_set_message('There was an error importing the Swagger data.', 'error');
      }
      break;
    default:
      if ($form_state['values']['type'] == 'apigee_json') {
        $name = 'SmartDocs JSON';
        $file_format = 'json';
        $file_type = 'apigee_json';
      } else {
        $name = 'WADL XML';
        $file_format = 'xml';
        $file_type = 'wadl';
      }

      switch($form_state['values'][$file_type . '_type']) {
        case 'path':
          $entity[$file_format] = file_get_contents($form_state['values'][$file_type . '_path_model_import']);
          break;
        default:
          $file = file_load($form_state['values'][$file_type . '_upload_model_import']);
          $file->status = FILE_STATUS_PERMANENT;
          file_save($file);
          $entity[$file_format] = file_get_contents($file->uri);
          break;
      }
      try {
        $test = entity_get_controller('docgen_model')->import($entity, $file_type);
        if (!isset($test['message'])) {
          drupal_set_message('The ' . $name . ' has been imported into the model.', 'status');
          $model = $form_state['input']['model'];
          if ((bool)$form_state['input'][$model . '_oauth_20_webserver_enable']) {
            $oauth = array();
            // build OAuth package
            $oauth['name'] = 'oauth2WebServerFlow';
            $oauth['clientId'] = $form_state['input'][$model . '_oauth_20_webserver_client_id'];
            $oauth['clientSecret'] = $form_state['input'][$model . '_oauth_20_webserver_client_secret'];
            $oauth['authorizationUrl'] = $form_state['input'][$model . '_oauth_20_webserver_authorization_url'];
            $oauth['authorizationVerb'] = $form_state['input'][$model . '_oauth_20_webserver_authorization_verb'];
            $oauth['accessTokenUrl'] = $form_state['input'][$model . '_oauth_20_webserver_access_token_url'];
            $oauth['accessTokenType'] = $form_state['input'][$model . '_oauth_20_webserver_access_token_type'];
            $oauth['accessTokenParamName'] = $form_state['input'][$model . '_oauth_20_webserver_param_name'];
            $oauth['clientAuthScheme'] = $form_state['input'][$model . '_oauth_20_webserver_client_authentication_name'];
            // save defaults
            variable_set($model . '_oauth_20_webserver_client_id', $form_state['input'][$model . '_oauth_20_webserver_client_id']);
            variable_set($model . '_oauth_20_webserver_client_secret', $form_state['input'][$model . '_oauth_20_webserver_client_secret']);
            variable_set($model . '_oauth_20_webserver_authorization_url', $form_state['input'][$model . '_oauth_20_webserver_authorization_url']);
            variable_set($model . '_oauth_20_webserver_authorization_verb', $form_state['input'][$model . '_oauth_20_webserver_authorization_verb']);
            variable_set($model . '_oauth_20_webserver_access_token_url', $form_state['input'][$model . '_oauth_20_webserver_access_token_url']);
            variable_set($model . '_oauth_20_webserver_access_token_type', $form_state['input'][$model . '_oauth_20_webserver_access_token_type']);
            variable_set($model . '_oauth_20_webserver_param_name', $form_state['input'][$model . '_oauth_20_webserver_param_name']);
            variable_set($model . '_oauth_20_webserver_client_authentication_name', $form_state['input'][$model . '_oauth_20_webserver_client_authentication_name']);
            // make call
            entity_get_controller('docgen_revision')->oAuthEnable($model, $test['revisionNumber'], $oauth);
            $config = devconnect_get_org_settings();
            $callback = $base_url . '/smartdocs/oauth/callback?org=' . $config['org'] . '&api=' . $model . '&revision=' . $test['revisionNumber'];
            drupal_set_message('OAuth has been enabled.  The callback is: ' . $callback, 'state');
            variable_set($model . '_oauth_20_webserver_callback_url_' . $test['revisionNumber'], $callback);
          }
          $form_state['redirect'] = 'admin/content/smartdocs/list/' . $form_state['values']['model'] .'/detail';
        } else {
          drupal_set_message('There was an error importing the ' . $name . '. ' . $test['message'], 'error');
        }
      } catch (Exception $e) {
        drupal_set_message('There was an error importing the ' . $name . '.', 'error');
      }
      break;
  }
}

/**
 * Implements hook_entity_info().
 *
 * @return array
 */
function devconnect_docgen_entity_info() {
  $info = array();

  $info['docgen_model'] = array(
    'label' => t('Docgen Model'),
    'controller class' => 'DocGenModelController',
    'fieldable' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  $info['docgen_revision'] = array(
    'label' => t('Docgen Revision'),
    'controller class' => 'DocGenRevisionController',
    'fieldable' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  $info['docgen_resource'] = array(
    'label' => t('Docgen Resource'),
    'controller class' => 'DocGenResourceController',
    'static cache' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  $info['docgen_operation'] = array(
    'label' => t('Docgen Operation'),
    'controller class' => 'DocGenMethodController',
    'fieldable' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  $info['docgen_doc'] = array(
    'label' => t('Docgen Doc'),
    'controller class' => 'DocGenDocController',
    'fieldable' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  $info['docgen_template'] = array(
    'label' => t('Docgen Template'),
    'controller class' => 'DocGenTemplateController',
    'fieldable' => TRUE,
    'base table' => 'smartdocs',
    'entity keys' => array(
      'id' => 'sid',
    ),
  );
  return $info;
}

/**
 * Implements hook_views_api().
 *
 * @return array
 */
function devconnect_docgen_views_api() {
  return array(
    'api' => 2.0,
  );
}

/**
 * Implements hook_views_default_views().
 *
 * @return array
 */
function devconnect_docgen_views_default_views() {
  // This may get called during profile install BEFORE the private stream
  // wrapper is registered. In that case, exit early.
  $wrappers = stream_get_wrappers();
  if (!in_array('private', $wrappers)) {
    return array();
  }

  $views = array();
  $files = file_scan_directory('private://', '/\.view$/');
  foreach ($files as $absolute => $file) {
    require $absolute;
    if (isset($view)) {
      $views[$file->name] = $view;
    }
  }
  return $views;
}
