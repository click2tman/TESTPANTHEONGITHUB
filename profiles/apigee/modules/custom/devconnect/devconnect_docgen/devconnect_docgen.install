<?php

/**
 * Implements hook_schema
 */
function devconnect_docgen_schema() {
  $schema['cache_docgen'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['smartdocs'] = array(
    'description' => 'Provides all of the necessary data for smartdocs.',
    'fields' => array(
      'sid' => array(
        'description' => 'SmartDocs Drupal ID',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'Node associated with the SmartDoc',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'revision' => array(
        'description' => 'Revision associated with the SmartDoc',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'resource' => array(
        'description' => 'Resource Associated with the SmartDoc',
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'method' => array(
        'description' => 'Method Associated with the SmartDoc',
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'model' => array(
        'description' => 'Model Associated with the SmartDoc',
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'synced' => array(
        'description' => 'Sync Drupal node with SmartDocs',
        'type' => 'int',
        'default' => 1,
      ),
      'mpid' => array(
        'description' => 'add a SmartDocs Method ID based on full method URL path',
        'type' => 'varchar',
        'length' => 256,
      ),
    ),
    'primary key' => array('sid'),
  );

  return $schema;
}


/**
 * Implements hook_requirements
 *
 * @param $phase
 * @return array
 */
function devconnect_docgen_requirements($phase) {
  $result = array();
  $t = get_t();
  switch ($phase) {
    case 'install':
      if (defined('MAINTENANCE_MODE') && (MAINTENANCE_MODE == 'install')) {
        return $result;
      }
      try {
        $client = devconnect_default_api_client();
        $docgen = new \Apigee\DocGen\DocGenModel($client);
        $docgen->getModels();
      } catch (Exception $e) {
        if ($e->getCode() != '200') {
          $result['docgen_connection'] = array(
            'severity' => REQUIREMENT_ERROR,
            'title' => 'SmartDocs',
            'value' => $t('Service is not available for the current organization.'),
          );
        }
      }
      $js = preg_split("/\\r\\n|\\r|\\n/", SMARTDOCS_JS_B2);
      $connectivity = FALSE;
      foreach($js as $target) {
        $test = drupal_http_request($target);
        if (isset($test->code) && floor($test->code / 100) == 2) {
          $connectivity = TRUE;
        }
      }
      if (!$connectivity) {
        $message = "Your server may not be connected to the public internet. You may need to host JavaScript and CSS " .
          "assets locally."; //@todo add docs link
        $result['docgen_connection'] = array(
          'severity' => REQUIREMENT_WARNING,
          'title' => 'SmartDocs',
          'value' => $t($message),
        );
      }

      break;
    default:
      break;
  }
  return $result;
}

/**
 * Adds the SmartDocs table
 */
function devconnect_docgen_update_7000() {
  $schemas = devconnect_docgen_schema();
  foreach($schemas as $name => $schema) {
    db_create_table($name, $schema);
  }
  registry_rebuild();
}

/**
 * Populates the SmartDocs table with node association data
 */
function devconnect_docgen_update_7001() {
  $models = entity_load('docgen_model');
  if (!empty($models)) {
    foreach(entity_load('docgen_model') as $model) {
      $mid = strtolower(preg_replace(array(
        '/[^a-zA-Z0-9]+/',
        '/-+/',
        '/^-+/',
        '/-+$/',
      ), array('_', '_', '', ''), $model['name']));
      $model_name = substr($mid, 0, 32);
      $nodes = variable_get($model_name . '_nodes', array());
      if (!empty($nodes)) {
        $revisions = entity_get_controller('docgen_revision')->getAllRevisions($model['name']);
        foreach ($revisions as $revision) {
          $rev_number = $revision['revisionNumber'];
          $verbose = entity_get_controller('docgen_revision')->loadVerbose($model['name'], $rev_number);
          if (isset($verbose['resources'])) {
            foreach ($verbose['resources'] as $resource) {
              $res_id = $resource['id'];
              foreach($resource['methods'] as $method) {
                $name = $model['name'];
                if (isset($nodes[$method['id']])) {
                  $record = array (
                    'nid' =>  $nodes[$method['id']],
                    'revision' => $rev_number,
                    'resource' => $res_id,
                    'method' => $method['id'],
                    'model' => $name,
                  );
                  drupal_write_record('smartdocs', $record);
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Add a synced token column and method path ID to smartdocs table.
 */
function devconnect_docgen_update_7002() {
  if (!db_field_exists('smartdocs', 'synced')) {
    $spec = array(
      'type' => 'int',
      'description' => "Sync Drupal node with SmartDocs",
      'default' => 1,
    );
    db_add_field('smartdocs', 'synced', $spec);
  }

  if (!db_field_exists('smartdocs', 'mpid')) {
    $spec = array(
      'type' => 'varchar',
      'length' => 256,
      'description' => "add a SmartDocs Method ID based on full method URL path",
    );
    db_add_field('smartdocs', 'mpid', $spec);
  }
}

/**
 * Enable the new version of SmartDocs module and then disable the previous version.
 */
function devconnect_docgen_update_7003(){
  module_enable(array('smartdocs'), TRUE);
  module_disable(array('devconnect_docgen'));
}

/**
 * Implements hook_install().
 *
 * Sets pathauto settings to match Smartdocs requirements.
 */
function devconnect_docgen_install() {
  variable_set('pathauto_max_length', 255);
  variable_set('pathauto_max_component_length', 255);
  variable_set('pathauto_punctuation_left_curly', 2);
  variable_set('pathauto_punctuation_right_curly', 2);
}

