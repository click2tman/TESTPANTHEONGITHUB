<?php
/**
 * @file
 *  Augments Drupal's basic user functionality to handle extra
 *  API-interfacing functionality.
 */

module_load_include('php', 'devconnect_user', 'controllers/DeveloperController');
module_load_include('php', 'devconnect_user', 'entities/DeveloperEntity');
module_load_include('inc', 'devconnect_user', 'devconnect_user.sync');

use Apigee\Util\ErrorHandling;

/**
 * Implements hook_permission().
 *
 * @return array
 */
function devconnect_user_permission() {
  return array(
    "administer devconnect_user settings" => array(
      "title" => t("Administer DevConnect Developers."),
      "description" => t("Perform administration tasks for Apigee DevConnect Developers.")
    )
  );
}

/**
 * Implements hook_menu().
 *
 * @return array
 */
function devconnect_user_menu() {
  $items = array();
  $items['admin/people/sync'] = array(
    'title' => t('Dev Portal Developer Sync'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_user_sync_confirm_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'api_products',
    'file' => 'devconnect_user.sync.inc'
  );
  $items['admin/config/devconnect/user-settings'] = array(
    'title' => t('Dev Portal User Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_user_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'devconnect_user.admin.inc',
  );
  $items['admin/config/devconnect/user-attributes'] = array(
    'title' => t('Dev Portal User Attributes'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_user_attributes_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'devconnect_user.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_user_login
 */
function devconnect_user_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset') {
    if ((bool) variable_get('apigee_enable_redirect_path', 0)) {
      drupal_goto(variable_get('apigee_user_redirect_path', ''));
    }
  }
}

/**
 * Implements hook_entity_info();
 *
 * @return array
 */
function devconnect_user_entity_info() {
  $info = array(
    'developer' => array(
      'label' => t('Developer'),
      'controller class' => 'DeveloperController',
      'fieldable' => FALSE,
    ),
  );
  return $info;
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function devconnect_user_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
      $form['name']['#attributes']['autocomplete'] = 'off';
      $form['pass']['#attributes']['autocomplete'] = 'off';
      break;
    case 'user_profile_form':

      if ($form['#user_category'] != 'account' && $form['#user_category'] != 'register') {
        return;
      }

      // Breadcrumb navigation
      $user = $form['#user'];
      // Determine nicely-displayable user name
      $user_name = $user->name; // default value
      if (property_exists($user, 'field_first_name') && property_exists($user, 'field_last_name')) {
        if (isset($user->field_first_name[LANGUAGE_NONE][0]['value']) && isset($user->field_last_name[LANGUAGE_NONE][0]['value'])) {
          $first_name = $user->field_first_name[LANGUAGE_NONE][0]['value'];
          $last_name = $user->field_last_name[LANGUAGE_NONE][0]['value'];
          if (!empty($first_name) && !empty($last_name)) {
            $user_name = "$first_name $last_name";
          }
        }
      }
      $breadcrumb = array(
        t('Home') => NULL,
        $user_name => 'user'
      );
      drupal_set_title(t('Edit Profile'));
      drupal_set_breadcrumb($breadcrumb);

      if (array_key_exists('picture', $form)) {
        $form['picture']['#weight'] = -99;
      }
      $form['field_first_name']['#weight'] = -98;
      $form['field_last_name']['#weight'] = -97;
      if (array_key_exists('field_company_name', $form)) {
        $form['field_company_name']['#weight'] = -96;
      }

      $tnc_url = _devconnect_user_get_tnc_url($form['#user']);
      if ($tnc_url == 'legal' && module_exists('legal')) {
        if (isset($form['field_terms_and_conditions'])) {
          unset ($form['field_terms_and_conditions']);
        }
      }

      // Email address is now immutable, to keep it in line with
      // KMS product requirements.
      $form['account']['mail']['#disabled'] = TRUE;
      $form['account']['mail']['#description'] = t('All emails from the system will be sent to this address.');
      $form['account']['mail']['#title'] = str_replace('E-mail', 'Email', $form['account']['mail']['#title']);
      $form['account']['current_pass']['#description'] = t('Enter your current password to change your password.')
        . ' '
        . l(t('Request new password'), 'user/password', array('attributes' => array('title' => t('Request new password via email.'))))
        . '.';

      // Add a link to openid admin page only if the openid module is enabled
      if (module_exists('openid')) {
        $middle_arg = (module_exists('me') && $form['#user']->uid == $GLOBALS['user']->uid) ? 'me' : $form['#user']->uid;
        $form['openid'] = array(
          '#markup' => l(t('Manage your OpenIDs'), 'user/' . $middle_arg . '/openid'),
          '#prefix' => '<div class="control-group form-openid"><div class="control-label" style="margin-bottom: 5px;">',
          '#suffix' => '</div></div>',
          '#weight' => 2,
        );
        return;
      }
      break;

    case 'user_register_form':
      drupal_add_css(drupal_get_path('module', 'devconnect_user') . '/devconnect_user.css',
        array('group' => CSS_THEME, 'every_page' => TRUE)
      );
      $form['picture']['#weight'] = -99;
      $form['field_first_name']['#weight'] = -98;
      $form['field_last_name']['#weight'] = -97;
      $form['field_company_name']['#weight'] = -96;

      $tnc_url = _devconnect_user_get_tnc_url($form['#user']);
      if ($tnc_url == 'legal' && module_exists('legal')) {
        if (isset($form['field_terms_and_conditions'])) {
          unset ($form['field_terms_and_conditions']);
        }
      }
      else {
        $form['field_terms_and_conditions']['#prefix'] = '<div id="terms-field">';
        $form['field_terms_and_conditions']['#suffix'] = '</div>';
        $form['field_terms_and_conditions'][LANGUAGE_NONE]['#title'] = t('I agree to the <a href="@url" target="_blank">Terms of Use</a>', array('@url' => $tnc_url));
      }
      break;
  }
}

/**
 * Implements hook_variable_info().
 *
 * @param array $options
 * @return array
 */
function devconnect_user_variable_info($options = array()) {
  $variables['devconnect_user_tnc_url'] = array(
    'type' => 'string',
    'title' => t('Terms & Conditions URL'),
    'default' => _devconnect_user_get_tnc_url(),
    'description' => t('The URL of the Terms & Conditions page. Omit hostname and leading slash.'),
    'required' => TRUE,
    'group' => 'devconnect'
  );
  return $variables;
}

/**
 * Determines the URL of the Terms & Conditions URL.
 *
 * First, checks to see if Legal module is enabled and is configured.
 * If not, checks to see if any custom modules implement hook_tnc_url().
 * Finally, if neither of the above is true, pulls value from Drupal variable.
 *
 * @param null|stdClass $user
 * @return string
 */
function _devconnect_user_get_tnc_url($user = NULL) {
  $tnc_url = NULL;
  if (module_exists('legal')) {
    $conditions = legal_get_conditions();
    if (!empty($conditions['version'])) {
      $tnc_url = 'legal';
    }
  }
  if (!isset($tnc_url)) {
    foreach (module_implements('tnc_url') as $module) {
      $tnc_url = call_user_func($module . '_tnc_url', $user);
      break;
    }
  }
  if (!isset($tnc_url)) {
    $tnc_url = url(variable_get('devconnect_user_tnc_url', 'basic-page/terms-use'));
  }
  return $tnc_url;
}


function _devconnect_user_get_field_value($field, array $edit, stdClass $account, $default = '') {

  $edit_value = $default;
  if (array_key_exists($field, $edit)) {
    if (is_scalar($edit[$field])) {
      $edit_value = $edit[$field];
    }
    elseif (is_array($edit[$field]) && array_key_exists(LANGUAGE_NONE, $edit[$field]) && !empty($edit[$field][LANGUAGE_NONE])) {
      if (is_scalar($edit[$field][LANGUAGE_NONE])) {
        $edit_value = $edit[$field][LANGUAGE_NONE];
      }
      else {
        $temp_value = reset($edit[$field][LANGUAGE_NONE]);
        if (is_scalar($temp_value)) {
          $edit_value = $temp_value;
        }
        elseif (array_key_exists('value', $temp_value)) {
          $edit_value = $temp_value['value'];
        }
      }
    }
  }
  $account_value = $default;
  if (property_exists($account, $field)) {
    $account_field = $account->$field;
    if (is_scalar($account_field)) {
      $account_value = $account_field;
    }
    elseif (is_array($account_field) && array_key_exists(LANGUAGE_NONE, $account_field) && !empty($account_field[LANGUAGE_NONE])) {
      if (is_scalar($account_field[LANGUAGE_NONE])) {
        $account_value = $account_field[LANGUAGE_NONE];
      }
      else {
        $temp_value = reset($account_field[LANGUAGE_NONE]);
        if (is_scalar($temp_value)) {
          $account_value = $temp_value;
        }
        elseif (array_key_exists('value', $temp_value)) {
          $account_value = $temp_value['value'];
        }
      }
    }
  }
  return $edit_value == $default ? $account_value : $edit_value;
}

/**
 * Implements hook_user_presave().
 *
 * @param $edit
 * @param $account
 * @param $category
 */
function devconnect_user_user_presave(&$edit, $account, $category) {
  if (isset($edit['already_in_kms']) && $edit['already_in_kms'] === TRUE) {
    unset($edit['already_in_kms']);
    return;
  }
  // Don't update user 1
  if (is_object($account) && property_exists($account, 'uid') && $account->uid == 1) {
    return;
  }
  $config =& devconnect_get_org_settings();
  $org = $config['org'];
  if (empty($org) || $org == 'fixme') {
    return;
  }

  $first_name = _devconnect_user_get_field_value('field_first_name', $edit, $account);
  $last_name = _devconnect_user_get_field_value('field_last_name', $edit, $account);
  $mail = _devconnect_user_get_field_value('mail', $edit, $account);
  $name = _devconnect_user_get_field_value('name', $edit, $account);
  $orig_mail = (empty($account->mail) ? $edit['mail'] : $account->mail);

  /** @var Drupal\devconnect_user\DeveloperEntity $entity */
  $entity = entity_get_controller('developer')->loadIfExists($orig_mail);
  if ($entity) {
    $action = 'update';
  }
  else {
    $entity = entity_create('developer', array());
    $action = 'create';
  }
  $entity->email = $mail;
  $entity->userName = $name;
  $entity->firstName = $first_name;
  $entity->lastName = $last_name;

  $fields = variable_get('devconnect_user_attributes_to_persist_in_kms', array());
  foreach ($fields as $field_name => $field_specs) {
    $field_full_name = 'field_' . $field_name;
    if ($field_specs['selected']) {
      $att_name = $field_specs['kms_internal_attribute_name'];

      $field_value = _devconnect_user_get_field_value($field_full_name, $edit, $account, NULL);

      if (strlen($field_value) === 0) {
        $set_value = TRUE;
        $att_value = NULL;
        switch ($field_specs['empty_action']) {
          case 'null':
            break;
          case 'empty':
            $att_value = '';
            break;
          case 'default':
            $field = field_info_instance('user', $field_full_name, 'user');
            $default_value = isset($field['default_value'][0]['value']) ? $field['default_value'][0]['value'] : NULL;
            if ($field_specs['convert_to_boolean_string_value']) {
              $default_value = (bool) $default_value;
            }
            $att_value = _devconnect_user_scrub_attribute($default_value);
            break;
          case 'avoid': //Attribute is not to be sent
          default:
            $set_value = FALSE;
            break;
        }
        if ($set_value) {
          $entity->attributes[$att_name] = $att_value;
        }
      }
      else {
        $entity->attributes[$att_name] = _devconnect_user_scrub_attribute($field_value);
      }
    }
  }

  // Bring in any attributes that were defined by other hook_user_presave() implementations
  foreach ($edit as $key => $field_value) {
    if (substr($key, 0, 10) == 'attribute_') {
      $entity->attributes[substr($key, 10)] = _devconnect_user_scrub_attribute($field_value);
    }
  }

  if (array_key_exists('status', $edit)) {
    $status = (bool) $edit['status'];
  }
  elseif (property_exists($account, 'status')) {
    $status = (bool) $account->status;
  }
  else {
    $status = FALSE;
  }
  $entity->status = $status ? 'active' : 'inactive';

  $saved = entity_save('developer', $entity);
  $results = devconnect_get_debug_data();
  if (!$saved) {
    devconnect_default_org_config()->logger->error(print_r($results, TRUE));

    if (user_access('view devconnect errors')) {
      $summary = t('An error occurred while trying to @action this user. Please try again later.', array('@action' => $action));
      $detail = t('Status: @code @status', array(
          '@code' => $results['code'],
          '@status' => $results['code_status']
        )) . "\n" . print_r($results, TRUE);
      devconnect_notify(ErrorHandling::CODE_USER_CANNOT_BE_SAVED, $summary, $detail);
    }
  }

  foreach (module_implements('devconnect_user_save') as $module) {
    $function = $module . '_devconnect_user_save';
    $function($results, $edit, $account);
  }
  devconnect_default_org_config()->logger->debug(print_r($results, TRUE));
}

function _devconnect_user_scrub_attribute($field_value) {
  if (is_object($field_value) || is_array($field_value)) {
    $field_value = json_encode($field_value);
  }
  // Booleans are saved as their string value
  elseif ($field_value === TRUE) {
    $field_value = 'true';
  }
  elseif ($field_value === FALSE) {
    $field_value = 'false';
  }
  // Force ints/floats to string too
  else {
    $field_value = (string) $field_value;
  }
  return $field_value;
}

/**
 * Implements hook_user_delete().
 *
 * @param $account
 */
function devconnect_user_user_delete($account) {
  // Don't try to delete users from KMS if org hasn't been configured yet.
  $config =& devconnect_get_org_settings();
  if (empty($config['org']) || $config['org'] == 'fixme') {
    return;
  }
  // Don't update anonymous or user 1
  if (property_exists($account, 'uid') && $account->uid < 2) {
    return;
  }

  $log_level = 'debug';
  try {
    entity_delete('developer', $account->mail);
  } catch (Exception $e) {
    $log_level = 'error';
  }
  $results = devconnect_get_debug_data();
  devconnect_default_org_config()->logger->$log_level(print_r($results, TRUE));
  module_invoke_all('devconnect_user_delete', $results, $account);
}


/**
 * Treat all user pages as not administrative
 *
 * @param array $paths
 */
function devconnect_user_admin_paths_alter(&$paths) {
  $paths['user/*'] = FALSE;
}

/**
 * Implements hook_redirect_alter
 *
 * @param stdClass $redirect
 */
function devconnect_user_redirect_alter(&$redirect) {
  global $user;
  // Only act if user token in redirect path
  if (!empty($redirect->redirect) && strpos($redirect->redirect, '[user') !== FALSE) {
    if (!user_is_logged_in()) {
      // Bounce via login back to source path
      $redirect->redirect = 'user/login';
      $redirect->redirect_options['query'] = array('destination' => $redirect->source);
    }
    else {
      // Apply user tokens to redirect path
      $redirect->redirect = token_replace($redirect->redirect, array('user' => $user));
    }
  }
}

/**
 * Checks to see if developer_id has been set in $_SESSION. If not, we look
 * it up (in local cache or in Edge) and set it.
 *
 * @param stdClass $user
 * @return string|bool
 */
function devconnect_user_get_developer_id($user) {
  $developer_id = FALSE;
  if (!array_key_exists('developer_id', $_SESSION)) {
    $_SESSION['developer_id'] = NULL;
  }

  if ($_SESSION['developer_id'] === NULL) {
    $mail = $user->mail;
    // First, check local cache
    $query = db_select('dc_dev', 'd');
    $query->innerJoin('users', 'u', 'u.uid = d.uid');
    $developer_id = $query->condition('u.mail', $mail)
      ->fields('d', array('developer_id'))
      ->execute()
      ->fetchField();
    if (empty($developer_id)) {
      // Not found in local cache,
      $controller = entity_get_controller('developer');
      $entity = $controller->loadIfExists($mail);
      if (!empty($entity)) {
        $developer_id = $entity->developerId;
      }
    }
  }
  $_SESSION['developer_id'] = $developer_id;
  return $developer_id;
}

/**
 * Implement hook_form_FORM_ID_alter() for user_admin_account.
 *
 * @param array $form
 * @param array $form_state
 */
function devconnect_user_form_user_admin_account_alter(&$form, &$form_state) {
  // Add selectable developers to synch up to KMS
  $form['options']['operation']['#options']['synchup_devconnect'] = t('Sync Developer With DevConnect');
  $form['#submit'][] = 'devconnect_user_form_user_admin_account_alter_submit';
}

function devconnect_user_form_user_admin_account_alter_submit(&$form, &$form_state) {

  switch ($form_state['values']['operation']) {
    case 'synchup_devconnect':
      $account_ids = array_values($form_state['values']['accounts']);

      $list_items = array();

      $users = db_select('users', 'u')
        ->fields('u', array('uid', 'mail'))
        ->condition('u.uid', 0, '>')
        ->condition('u.uid', $account_ids, 'IN')
        ->execute()
        ->fetchAll(PDO::FETCH_OBJ);
      if (empty($users)) {
        drupal_set_message(t('No users were synced.'), 'status');
        return;
      }

      $emails = array();
      foreach ($users as $user) {
        $emails[] = $user->mail;
      }
      $developers = entity_load('developer', $emails);

      foreach ($users as $user) {
        if (array_key_exists($user->mail, $developers)) {
          $list_items[] = 'User ' . $user->mail . ' already exists on server.';
        }
        else {
          $user_obj = user_load($user);
          $list_items[] = _devconnect_user_save_entity($user_obj);
        }
      }

      $list_params = array(
        'items' => $list_items,
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array()
      );

      drupal_set_message(theme('item_list', $list_params), 'status');
      break;
  }
}

/**
 * Implements hook_token_info().
 *
 * @return array
 */
function devconnect_user_token_info() {
  $type = array(
    'name' => t('Developer'),
    'description' => t('Tokens related to developers'),
    'needs-data' => 'developer'
  );
  $dev['apps'] = array(
    'name' => t('Apps'),
    'description' => t('List of all Apps owned by this developer.')
  );
  $dev['uid'] = array(
    'name' => t('Developer User ID'),
    'description' => t('Drupal User ID (uid) of this developer.')
  );
  $dev['email'] = array(
    'name' => t('Developer Email'),
    'description' => t('Email address associated with this developer.')
  );
  $dev['developerId'] = array(
    'name' => t('Developer ID'),
    'description' => t('Developer ID (internal to KMS) for this developer.')
  );
  $dev['firstName'] = array(
    'name' => t('First Name'),
    'description' => t('Developer’s first name.')
  );
  $dev['lastName'] = array(
    'name' => t('Last Name'),
    'description' => t('Developer’s last name.')
  );
  $dev['userName'] = array(
    'name' => t('User Name'),
    'description' => t('Developer’s Drupal username.')
  );
  $dev['status'] = array(
    'name' => t('Status'),
    'description' => t('Status of this developer.')
  );
  /*
  $dev['attributes'] = array(
    'name' => t('Attributes'),
    'description' => t('Custom attributes for this developer.')
  );
  */
  $dev['createdAt'] = array(
    'name' => t('Created At'),
    'description' => t('Timestamp at which the developer profile was created in KMS.')
  );
  $dev['modifiedAt'] = array(
    'name' => t('Modified At'),
    'description' => t('Timestamp at which the developer profile was modified in KMS.')
  );
  $dev['devUrl'] = array(
    'name' => t('Developer Profile URL'),
    'description' => t('URL on this site where the developer’s profile may be viewed.')
  );

  return array(
    'types' => array('developer' => $type),
    'tokens' => array('developer' => $dev),
  );
}

/**
 * Implements hook_tokens().
 *
 * @param string $type
 * @param array $tokens
 * @param array $data
 * @param array $options
 *
 * @return array
 */
function devconnect_user_tokens($type, array $tokens, array $data = array(), array $options = array()) {
  if ($type != 'developer' || empty($data['developer'])) {
    return array();
  }
  $url_options = array('absolute' => TRUE);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);
  $dev = $data['developer'];
  $replacements = array();
  foreach ($tokens as $name => $original) {
    switch ($name) {
      case 'devUrl':
        $replacements[$original] = url('user/' . $dev['uid'], $url_options);
        break;
      // Timestamps
      case 'createdAt':
      case 'modifiedAt':
        $replacements[$original] = format_date(floor($dev[$name] / 1000), 'medium', '', NULL, $language_code);;
        break;
      // Arrays of strings
      case 'apps':
        $replacements[$original] = $sanitize ? check_plain(join(', ', $dev[$name])) : join(', ', $dev[$name]);
        break;
      default:
        $replacements[$original] = $sanitize ? check_plain($dev[$name]) : $dev[$name];
        break;
    }
  }

  return $replacements;
}

/**
 * Given a Drupal user object, saves the corresponding developer entity.
 *
 * @param stdClass $user
 * @return string
 */
function _devconnect_user_save_entity($user) {
  $account = user_load($user->uid);
  $values = array(
    'email' => $account->mail,
    'userName' => $account->name,
    'status' => ($account->status ? 'active' : 'inactive'),
    'attributes' => array()
  );
  if (property_exists($account, 'field_first_name') && array_key_exists(LANGUAGE_NONE, $account->field_first_name) && array_key_exists(0, $account->field_first_name[LANGUAGE_NONE]) && array_key_exists('value', $account->field_first_name[LANGUAGE_NONE][0])) {
    $values['firstName'] = $account->field_first_name[LANGUAGE_NONE][0]['value'];
  }
  if (property_exists($account, 'field_last_name') && array_key_exists(LANGUAGE_NONE, $account->field_last_name) && array_key_exists(0, $account->field_last_name[LANGUAGE_NONE]) && array_key_exists('value', $account->field_last_name[LANGUAGE_NONE][0])) {
    $values['lastName'] = $account->field_last_name[LANGUAGE_NONE][0]['value'];
  }
  $vars = get_object_vars($account);
  foreach ($vars as $key => $value) {
    if (substr($key, 0, 10) == 'attribute_') {
      $values['attributes'][substr($key, 10)] = $value;
    }
  }
  $entity = entity_create('developer', $values);
  try {
    entity_save('developer', $entity);
    $message = 'User ' . $account->name . ' created on server';
  } catch (Exception $e) {
    $message = 'User ' . $account->name . ' not created on server. ' . $e->getMessage()
      . (function_exists('kpr') ? kpr(devconnect_get_debug_data(), TRUE) : '<pre>' . print_r(devconnect_get_debug_data(), TRUE) . '</pre>');
  }
  return $message;
}

function devconnect_user_is_org_admin($email) {
  static $admins = array();
  if (empty($admins)) {
    // This function is sometimes called before bootstrapping is complete.
    if (!class_exists('Apigee\ManagementAPI\UserRole')) {
      devconnect_init();
    }

    $orgs = module_invoke_all('get_configured_orgs');
    if (empty($orgs)) {
      $orgs = array('default');
    }

    foreach ($orgs as $org) {
      $ur = new Apigee\ManagementAPI\UserRole(devconnect_default_org_config($org));
      try {
        $admins = array_merge(
          $ur->getUsersByRole('opsadmin'),
          $ur->getUsersByRole('orgadmin')
        );
        $admins = array_unique(array_map('strtolower', $admins));
        if (in_array(strtolower($email), $admins)) {
          return TRUE;
        }
      } catch (Apigee\Exceptions\ResponseException $e) {
      }
    }
  }
  return FALSE;
}

function devconnect_user_get_admin_rids() {
  static $rids = NULL;

  if (!isset($rids)) {
    $rids = array();
    $roles = user_roles(TRUE);
    foreach ($roles as $rid => $role) {
      if (stripos($role, 'administrator') !== FALSE) {
        $rids[] = $rid;
      }
    }
  }
  return $rids;
}

/**
 * Implements hook_views_api().
 */
function devconnect_user_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'devconnect_user'),
  );
}


/**
 * Deletes references to a specific developer entity from our internal cache.
 *
 * Also removes cached references to any of this developer's apps.
 *
 * @param $entity
 */
function devconnect_user_delete_from_cache(Drupal\devconnect_user\DeveloperEntity $entity) {
  $developer_ids = $uid = NULL;
  if (empty($entity->developerId)) {
    $_user = user_load_by_mail($entity->email);
    if (is_object($_user)) {
      $uid = $_user->uid;
      $developer_ids = db_select('dc_dev', 'd')
        ->fields('d', array('developer_id'))
        ->condition('uid', $uid)
        ->execute()
        ->fetchCol();
    }
  }
  else {
    $developer_ids = array($entity->developerId);
  }
  if (!empty($developer_ids)) {
    db_delete('dc_dev_attributes')->condition('developer_id', $developer_ids)->execute();
    db_delete('dc_dev')->condition('developer_id', $developer_ids)->execute();

    // Now delete developer's apps as well
    if (!empty($uid)) {
      $app_ids = array();
      $result = db_select('dc_dev_app', 'a')
        ->fields('a', array('app_id'))
        ->condition('uid', $uid)
        ->execute();
      while ($app_id = $result->fetchCol()) {
        $app_ids[] = $app_id;
      }
      if (!empty($app_ids)) {
        db_delete('dc_dev_app_api_products')->condition('app_id', $app_ids);
        db_delete('dc_dev_app_attributes')->condition('app_id', $app_ids);
        db_delete('dc_dev_app_previous_status')->condition('app_id', $app_ids);
        db_delete('dc_dev_app')->condition('app_id', $app_ids);
      }
    }
  }
}

/**
 * Writes a developer entity to our internal cache.
 *
 * By default we delete any references to this entity from our cache before
 * writing, but when $ensure_clean is set to FALSE we can skip this step.
 * In real life this occurs when the table has been freshly truncated.
 *
 * @param $entity
 * @param bool $ensure_clean
 */
function devconnect_user_write_to_cache(Drupal\devconnect_user\DeveloperEntity $entity, $ensure_clean = TRUE) {
  if ($ensure_clean) {
    devconnect_user_delete_from_cache($entity);
  }
  $fields = array(
    'developer_id' => $entity->developerId,
    'uid' => intval($entity->uid),
    'status' => intval($entity->status == 'active')
  );
  db_insert('dc_dev')->fields($fields)->execute();
  foreach ($entity->attributes as $name => $value) {
    // @TODO: Decide either to accept NULL values or skip them
    // Temporary fix for NULL values not being accepted in DB 
    if (!isset($value)) {
      continue;
    }
    db_insert('dc_dev_attributes')
      ->fields(array(
        'developer_id' => $entity->developerId,
        'name' => $name,
        'value' => $value
      ))
      ->execute();
  }
}

/**
 * Implements hook_cron().
 *
 * Refreshes our developer caches.
 */
function devconnect_user_cron() {
  $has_drush = function_exists('drush_print');
  // Do not try to rebuild caches if we're not yet configured.
  $org_config = devconnect_default_org_config();
  if (empty($org_config->orgName)) {
    return;
  }

  if (lock_acquire(__FUNCTION__ . '_developers', 5)) {
    if ($has_drush) {
      drush_print('Loading all developers from Edge');
    }
    $devs = entity_load('developer');
    if ($has_drush) {
      drush_print('Loaded ' . (count($devs)) . ' developer(s) from Edge');
    }
    $count = count($devs);

    if ($count) {
      module_load_install('devconnect_user');
      $tables = array_keys(devconnect_user_schema());
      foreach ($tables as $table) {
        if ($has_drush) {
          drush_print('Truncating ' . $table);
        }
        db_truncate($table)->execute();
      }
      $devs = array_values($devs);
      foreach ($devs as $i => $dev) {
        if ($has_drush) {
          drush_print('writing dev ' . ($i + 1) . ' of ' . $count . ': ' . $dev->email);
        }
        devconnect_user_write_to_cache($dev, FALSE);
      }
    }
    lock_release(__FUNCTION__ . '_developers');
  }
}


/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Removes the OpenID identities tab
 *
 * @param array $data
 * @param $router_item
 * @param $root_path
 */
function devconnect_user_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (arg(0) == 'user' && array_key_exists('tabs', $data) && is_array($data['tabs'])) {
    if (isset($data['tabs'])) {
      foreach ($data['tabs'] as $i => $menu_item) {
        if (array_key_exists('output', $menu_item) && is_array($menu_item['output'])) {
          foreach ($menu_item['output'] as $j => $sub_item) {
            switch ($sub_item['#link']['path']) {
              case 'user/%/view':
              case 'user/%/openid':
                unset($data['tabs'][$i]['output'][$j]);
                $data['tabs'][$i]['count']--;
                break;
              case 'user/%/edit':
                $data['tabs'][$i]['output'][$j]['#link']['title'] = 'Edit User Profile';
                break;
            }
          }
        }
      }
    }
  }
}
