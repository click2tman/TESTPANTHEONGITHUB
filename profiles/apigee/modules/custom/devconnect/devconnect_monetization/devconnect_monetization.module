<?php

/**
 * @file
 * Main monetization module file.
 */

define('MONETIZATION_ADMIN_ROLE_NAME', 'Monetization Administrator');
define('MONETIZATION_FINANCE_ADMIN_ROLE_NAME', 'Finance Administrator');
define('MONETIZATION_DEVELOPER_ROLE_NAME', 'Developer');


define('DEVCONNECT_MONETIZATION_PLAN_ACTION_PURCHASE', 'purchase');
define('DEVCONNECT_MONETIZATION_PLAN_ACTION_CANCEL', 'cancel');

/**
 * Use /developers/{{developer_email}}/prepaid-developer-balance API call
 * to display report table values on 'Billing and Reports' page
 */
define('BILLING_AND_REPORTS_USE_PREPAID_API_CALL', 0);

/**
 * Use /developers/{{developer_email}}/developer-balances?all=true API call
 * to display report table values on 'Billing and Reports' page
 */
define('BILLING_AND_REPORTS_USE_DEVELOPER_BALANCES_API_CALL', 1);

define('MONETIZATION_PRODUCT_VERIFY_ACCEPTED_URL', '/users/me/monetization/packages/accepted-product/');

use Apigee\ManagementAPI\DeveloperApp;
use Apigee\Mint\Exceptions\MintApiException;
use Apigee\Mint\DataStructures\RatePlanDetail;
use Apigee\Mint\Developer;
use Apigee\Mint\DeveloperRatePlan;
use Apigee\Mint\Limit;
use Apigee\Mint\ManagementAPIOrganization;
use Apigee\Mint\MonetizationPackage;
use Apigee\Mint\Organization;
use Apigee\Mint\RatePlan;
use Apigee\Mint\TermAndCondition;
use Apigee\Mint\Types\BillingType;
use Apigee\Mint\Types\DeveloperType;
use Apigee\Mint\Types\MeteringType;
use Apigee\Mint\Types\QuotaPeriodType;
use Apigee\Mint\Types\QuotaType;
use Apigee\Util\CacheFactory;

module_load_include('php', 'devconnect_monetization', 'MintCacheManager');

/**
 * Returns a wrapper around org connection settings.
 *
 * @return Apigee\Util\OrgConfig
 * @throws Exception
 */
function devconnect_monetization_default_org_config() {
  return devconnect_default_org_config();
}

/**
 * Redirects the developer depending on either a POSTPAID or a PREPAID developer
 * @param Developer $developer
 */
function devconnect_monetization_route_by_billing_type(\Apigee\Mint\Developer $developer) {
  $me = module_exists('me') ? 'me' : $GLOBALS['user']->uid;
  $page = $developer->getBillingType() == BillingType::POSTPAID ? 'billing-document' : 'prepaid-balance';
  drupal_goto('users/' . $me . '/monetization/billing/' . $page);
}

/**
 * Implements hook_menu()
 */
function devconnect_monetization_menu() {

  $items = array();

  $items['admin/config/devconnect_monetization'] = array(
    'title' => 'Monetization settings',
    'description' => 'Control behavior of the Monetization module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_monetization_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'devconnect_monetization.admin.inc',
  );
  
  $items['admin/people/sync-from-4g-to-mint'] = array(
    'title' => t('Dev Portal Developer Sync From 4G to Mint'),
    'page callback' => 'devconnect_monetization_user_sync_from_4g_to_mint',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'api_products',
  );

  $items['users/%devconnect_monetization_developer/monetization'] = array(
    'title' => 'Monetization',
    'page callback' => 'devconnect_monetization_route_by_billing_type',
    'page arguments' => array(1),
    'access arguments' => array('access mint monetization'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Billing callbacks
  $items['users/%devconnect_monetization_developer/monetization/billing'] = array(
    'title' => 'Billing',
    'page arguments' => array(1),
    'access arguments' => array('access mint billing & reports'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['users/%devconnect_monetization_developer/monetization/billing/prepaid-balance'] = array(
    'title' => 'Prepaid Balance',
    'page callback' => 'devconnect_monetization_prepaid_balance',
    'page arguments' => array(1),
    'access callback' => 'devconnect_monetization_user_is_prepaid',
    'access arguments' => array('access mint prepaid reports', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'devconnect_monetization.billing.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
  );

  $items['users/%devconnect_monetization_developer/monetization/billing/billing-document'] = array(
    'title' => 'Received Bills',
    'page callback' => 'devconnect_monetization_billing_documents',
    'page arguments' => array(1),
    'access arguments' => array('download mint billing documents'),
    'file' => 'devconnect_monetization.billing.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['users/%devconnect_monetization_developer/monetization/billing/developer-reports'] = array(
    'title' => 'Reports',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_monetization_developer_report_form', 1),
    'access arguments' => array('download mint revenue report'),
    'file' => 'devconnect_monetization.billing.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['users/%devconnect_monetization_developer/monetization/billing/report/download-prepaid-report/%/%'] = array(
    'title' => 'Download Report',
    'page callback' => 'devconnect_monetization_download_report',
    'page arguments' => array(6, 7, 1),
    'access callback' => 'user_access',
    'access arguments' => array('download mint prepaid report'),
    'file' => 'devconnect_monetization.billing.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'type' => MENU_CALLBACK,
  );

  $items['users/%devconnect_monetization_developer/monetization/billing/billing-document/%'] = array(
    'title' => 'Get Billing Document',
    'page callback' => 'devconnect_monetization_billing_get_billing_document',
    'page arguments' => array(5, 1),
    'access arguments' => array('download mint billing documents'),
    'type' => MENU_CALLBACK,
    'file' => 'devconnect_monetization.billing.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
  );

  // Package callbacks
  $items['users/%devconnect_monetization_developer/monetization/packages'] = array(
    'title' => 'Catalog & Plans',
    'page callback' => 'devconnect_monetization_packages',
    'page arguments' => array(1),
    'access arguments' => array('view catalog and plans'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['users/%devconnect_monetization_developer/monetization/packages/catalog'] = array(
    'title' => 'Catalog',
    'page arguments' => array(1),
    'access arguments' => array('list catalog'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['users/%devconnect_monetization_developer/monetization/packages/purchased'] = array(
    'title' => 'Purchased Plans',
    'page callback' => 'devconnect_monetization_purchased_plans',
    'page arguments' => array(1),
    'access arguments' => array('list purchased plans'),
    'type' => MENU_LOCAL_TASK
  );

  $items['users/%devconnect_monetization_developer/monetization/packages/accepted-product/%'] = array(
    'title' => 'Get Products Accepted By Developer',
    'page callback' => 'devconnect_monetization_accepted_products',
    'page arguments' => array(1, 5),
    'delivery callback' => 'drupal_json_output',
    'access arguments' => array('add mint product to application'),
    'type' => MENU_CALLBACK,
  );

  $items['users/%devconnect_monetization_developer/monetization/packages/%devconnect_monetization_package/view'] = array(
    'title' => 'Packages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_monetization_plan_form', 1, 4),
    'access arguments' => array('purchase mint plan'),
    'file' => 'devconnect_monetization.plan.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'type' => MENU_CALLBACK,
  );

  $items['users/%devconnect_monetization_developer/monetization/packages/%devconnect_monetization_package/delete/%'] = array(
    'title' => 'Packages',
    'page callback' => 'devconnect_monetization_remove_plan_from_user',
    'page arguments' => array(4, 6),
    'access arguments' => array('delete mint plan'),
    'file' => 'devconnect_monetization.plan.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'type' => MENU_CALLBACK,
  );

  $items['users/%devconnect_monetization_developer/monetization/packages/%devconnect_monetization_package/required-top-up-form/%devconnect_monetization_plan/%'] = array(
    'title' => 'Top up',
    'delivery callback' => 'devconnect_monetization_insufficient_top_up_form_output',
    'page callback' => 'devconnect_monetization_ajax_insufficient_top_up_form',
    'page arguments' => array(
      1 /* Developer */,
      4 /* Package */,
      6 /* Plan */,
      7 /* Required Balance|Start Date|Overlap */,
    ),
    'access arguments' => array('purchase mint plan'),
    'type' => MENU_CALLBACK,
    'file' => 'devconnect_monetization.plan.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
  );

  // Settings callbacks
  $items['users/%devconnect_monetization_developer/monetization/company'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_monetization_company_details_form', 1),
    'access arguments' => array('edit mint company profile'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'devconnect_monetization.company_profile.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
  );

  $items['users/%devconnect_monetization_developer/monetization/company/edit'] = array(
    'title' => 'Company Profile',
    'page arguments' => array('devconnect_monetization_company_details_form', 1),
    'access arguments' => array('edit mint company profile'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -9,
  );

  $items['users/%devconnect_monetization_developer/monetization/company/bank-details'] = array(
    'title' => 'Bank & Finance',
    'access arguments' => array('edit mint bank details'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devconnect_monetization_company_bank_details_form', 1),
    'file' => 'devconnect_monetization.company_profile.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );

  $items['users/%devconnect_monetization_developer/monetization/company/tncs'] = array(
    'title' => 'Terms & Conditions',
    'page callback' => 'devconnect_monetization_list_tncs',
    'page arguments' => array(1),
    'access arguments' => array('view mint terms and conditions'),
    'file' => 'devconnect_monetization.company_profile.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -7,
  );

  $items['users/%devconnect_monetization_developer/monetization/company/developers'] = array(
    'title' => 'Manage User Roles',
    'page callback' => 'devconnect_monetization_company_users_forms',
    'page arguments' => array(1),
    'access arguments' => array('edit mint developers roles'),
    'file' => 'devconnect_monetization.company_profile.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -6,
  );

  $items['users/%devconnect_monetization_developer/monetization/company/developers/%/remove'] = array(
    'page callback' => 'devconnect_monetization_user_remove_from_company',
    'page arguments' => array(5, 1),
    'access arguments' => array('edit mint developers roles'),
    'type' => MENU_CALLBACK,
    'file' => 'devconnect_monetization.company_profile.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
  );

  $items['users/%devconnect_monetization_developer/monetization/company/developers/list'] = array(
    'title' => 'Get Developers For Autocomplete',
    'page callback' => 'devconnect_monetization_users_autocomplete',
    'page arguments' => array(4, 1),
    'access callback' => 'user_access',
    'access arguments' => array('edit mint company profile'),
    'type' => MENU_CALLBACK,
    'file' => 'devconnect_monetization.company_profile.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
  );

  /*
  $items['users/%user/monetization/developers'] = array(
    'title' => 'Get Developers For Autocomplete',
    'page callback' => 'devconnect_monetization_users_autocomplete',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('edit mint company profile'),
    'type' => MENU_CALLBACK,
    'file' => 'devconnect_monetization.company_profile.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
  );
  */
  
  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * @param $items
 */
function devconnect_monetization_menu_alter(&$items) {
  $items['user/%user/apps'] = array_merge($items['user/%user/apps'], array(
    'page callback' => 'devconnect_monetization_company_apps_getlist',
    'file' => 'devconnect_monetization.apps.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'access callback' => 'user_access',
    'access arguments' => array('list mint company applications'),
  ));

  $items['user/%user/app-detail/%'] = array_merge($items['user/%user/app-detail/%'], array(
    'page callback' => 'devconnect_monetization_company_apps_detail',
    'page arguments' => array(1, 3),
    'file' => 'devconnect_monetization.apps.inc',
    'access callback' => 'user_access',
    'access arguments' => array('view mint company application details'),
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
  ));
  $items['user/%user/apps/add'] = array_merge($items['user/%user/apps/add'], array(
    'page callback' => 'devconnect_monetization_company_apps_edit_form',
    'page arguments' => array(1),
    'file' => 'devconnect_monetization.apps.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'access callback' => 'user_access',
    'access arguments' => array('create mint company applications'),
  ));
  $items['user/%user/apps/%/edit-app'] = array_merge($items['user/%user/apps/%/edit-app'], array(
    'page callback' => 'devconnect_monetization_company_apps_edit_form',
    'page arguments' => array(1, 3),
    'file' => 'devconnect_monetization.apps.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'access callback' => 'user_access',
    'access arguments' => array('edit mint company applications'),
  ));
  $items['user/%user/apps/%/delete'] = array_merge($items['user/%user/apps/%/delete'], array(
    'page callback' => 'devconnect_monetization_company_app_delete_form',
    'page arguments' => array(1, 3),
    'file' => 'devconnect_monetization.apps.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
    'access callback' => 'user_access',
    'access arguments' => array('remove mint company applications'),
  ));
  $items['user/%user/app-performance/%/%'] = array_merge($items['user/%user/app-performance/%/%'], array(
    'page callback' => 'devconnect_monetization_company_analytics_performance_download',
    'page arguments' => array(1, 3, 4),
    'file' => 'devconnect_monetization.apps.inc',
    'file path' => drupal_get_path('module', 'devconnect_monetization'),
  ));
}

/**
 * Access callback to determine if a user is not POSTPAID, therefore has access to prepaid-balance
 *
 * @param string $permission
 * @param Developer $developer
 * @return bool
 */
function devconnect_monetization_user_is_prepaid($permission, $developer) {
  return is_object($developer) && $developer->getBillingType() != BillingType::POSTPAID && user_access((string) $permission);
}

/**
 * Access callback for company profile.
 *
 * @return bool
 */
function _devconnect_monetization_access_company_profile() {
  return user_access('edit mint company profile')
  || user_access('edit mint bank details')
  || user_access('view mint terms and conditions')
  || user_access('accept mint terms and conditions')
  || user_access('edit mint developers roles');
}

/**
 * Access callback for billing
 *
 * @return bool
 */
function _devconnect_monetization_access_billing() {
  return user_access('access mint prepaid reports')
  || user_access('download mint prepaid report')
  || user_access('download mint revenue report')
  || user_access('download mint billing documents');
}

/**
 * Package menu wildcard loader.
 *
 * @param $package_id
 *
 * @return \Apigee\Mint\MonetizationPackage|bool
 */
function devconnect_monetization_package_load($package_id) {
  static $package;
  if (!isset($package)) {
    try {
      $config = devconnect_monetization_default_org_config();

      // Make menu load happy
      if (CacheFactory::getDefault() == NULL) {
        $cache_manager = CacheFactory::getCacheManager('MintCacheManager');
        CacheFactory::setDefault($cache_manager);
      }
      $package = new MonetizationPackage($config);
      $package->load(rawurldecode($package_id));
      return $package;
    }
    catch (Exception $e) {
      if ($e->getCode() != 404) {
        drupal_set_message(t('Error communicating with the system backend. Purchasing plans and viewing billing information may not be available.'), 'error');
        $message = (method_exists($e, '__toString') ? (string)$e : $e->getMessage());
        devconnect_default_org_config()->logger->critical($message);
      }
    }
  }
  else {
    return $package;
  }
  return FALSE;
}

/**
 * Load the developer, and if the developer is in a company, load that
 * company instead.  Edge considers companies and developers the same.
 *
 * @param $uid
 *
 * @return \Apigee\Mint\Developer|bool
 */
function devconnect_monetization_developer_load($uid = NULL) {
  if (!user_is_logged_in()) {
    return;
  }	
  static $developer;
  if (!isset($developer)) {
    try {
      $developer_id = _devconnect_monetization_get_developer_id(TRUE);
      $config = devconnect_monetization_default_org_config();
      $developer = new Developer($config);
      $developer->load($developer_id);
      return $developer;
    }
    catch (Exception $e) {
      global $user;
      $message = (method_exists($e, '__toString') ? (string)$e : $e->getMessage());

      // If we are trying to load a company, the developer id will not be the
      // user's email, but the company's email address.
      if($user->mail != $developer_id) {
        drupal_set_message(t('There was an error loading your company information, please contact support.'), 'error');
        $message_vars = array(
          '%company_email' => $developer_id,
          '%user_name' => $user->name,
          '%user_email' => $user->mail,
          '!message' => $message,
        );
        watchdog('devconnect_monetization', "Could not load company %company_email for user %user_name (%user_email) from Edge backend.  Is the user company information in Dev Portal invalid? Details: !message", $message_vars, WATCHDOG_ERROR);
      } else {
        devconnect_default_org_config()->logger->critical('Could not retrieve developer object from 4G backend: ' . $message);
        if ($e->getCode() != 404) {
          drupal_set_message(t('Error communicating with the system backend. Purchasing plans and viewing billing information may not be available.'), 'error');
        }
        else {
          drupal_set_message(t('You do not have a Mint-enabled account. Please contact your administrator.'), 'error');
        }
      }
    }
  }
  else {
    return $developer;
  }
  return FALSE;
}

function devconnect_monetization_plan_load($plan_id, $package_id = NULL) {
  static $plan;
  $package_id = isset($package_id) ? $package_id : rawurldecode(arg(4));
  if (!isset($plan)) {
    try {
      $config = devconnect_monetization_default_org_config();
      $plan = new RatePlan($package_id, $config);
      $plan->load($plan_id);
      return $plan;
    }
    catch (Exception $e) {
      if ($e->getCode() != 404) {
        drupal_set_message(t('Error communicating with the system backend. Purchasing plans and viewing billing information may not be available.'), 'error');
        $message = (method_exists($e, '__toString') ? (string)$e : $e->getMessage());
        devconnect_default_org_config()->logger->critical($message);
      }
    }
  }
  else {
    return $plan;
  }
  return FALSE;
}

/**
 * Implements hook_init()
 */
function devconnect_monetization_init() {

  drupal_add_library('system', 'ui');

  if (arg(2) == 'monetization') {
    drupal_add_js(libraries_get_path('maskmoney') . '/jquery.maskMoney.js');
    $currencies = commerce_currencies();
    array_walk($currencies, function(&$item){ unset($item['format_callback'], $item['conversion_callback'], $item['conversion_rate'], $item['numeric_code'], $item['rounding_step']);});
    drupal_add_js(array('devconnect_monetization' => array('currencies' => $currencies)), 'setting');
    drupal_add_js(array('devconnect_monetization' => array('menu_active' => TRUE)), 'setting');
  }

  $themes = list_themes();
  if (arg(2) == 'monetization' && isset($themes['apigee_responsive'])
    && $themes['apigee_responsive']->status == 1
  ) {
    drupal_add_js(drupal_get_path('module', 'devconnect_monetization') . '/js/menu-link.js', 'file');
  }
  drupal_add_css(drupal_get_path('module', 'devconnect_monetization') . '/css/devconnect_monetization.css');
  drupal_add_js(drupal_get_path('module', 'devconnect_monetization') . '/js/behaviors.js', 'file');
  drupal_add_js(drupal_get_path('module', 'devconnect_monetization') . '/js/global.js', 'file');

  $GLOBALS['devconnect_monetization_debug_endpoint_response'] = variable_get('devconnect_monetization_debug_endpoint_response', FALSE);
  // Make drush happy
  if (CacheFactory::getDefault() == NULL) {
    $cache_manager = \Apigee\Util\CacheFactory::getCacheManager('MintCacheManager');
    CacheFactory::setDefault($cache_manager);
  }
  devconnect_monetization_clear_api_cache();
}

/**
 * implements hook_form_FORM_ID_alter()
 */
function devconnect_monetization_form_devconnect_monetization_top_up_balance_form_alter(&$form, &$form_state) {
  $plan_id = isset($_REQUEST['planid']) && strlen($_REQUEST['planid']) ? $_REQUEST['planid'] : NULL;
  if (isset($plan_id)) {
    $form['planid'] = array(
      '#type' => 'value',
      '#value' => $plan_id,
    );
    $form['date'] = array(
      '#type' => 'value',
      '#value' => $_REQUEST['date'],
    );
    $form['overlap'] = array(
      '#type' => 'value',
      '#value' => $_REQUEST['overlap']
    );
  }
}

/**
 * Page callback for:
 *   users/%devconnect_monetization_developer/monetization/packages
 *   users/%devconnect_monetization_developer/monetization/packages/catalog
 *
 * @param \Apigee\Mint\Developer $developer
 * @return string
 */
function devconnect_monetization_packages(\Apigee\Mint\Developer $developer) {

  $config = devconnect_monetization_default_org_config();
  try {
    $monetization_packages = new MonetizationPackage($config);
    $packages = $monetization_packages->getPackagesWithPublishedRatePlans($developer->getEmail());

    $variables = array();
    foreach ($packages as $package) {
      //TODO Remove the following "if" statement in phase 2, phase 1 does not include Virtual Currency
      $vc = $package->getVirtualCurrency();
      if (isset($vc)) {
        continue;
      }
      $variables['packages'][$package->getId()] = array(
        'displayName' => $package->getDisplayName(),
        'description' => $package->getDescription(),
        'products' => array(),
        'products_list' => array(),
      );
      foreach ($package->getProducts() as $product) {
        $variables['packages'][$package->getId()]['products_list'][$product->getId()] = array(
          'displayName' => $product->getDisplayName(),
          'name' => $product->getName(),
          'description' => $product->getDescription(),
        );
        $variables['packages'][$package->getId()]['products'][] = $product->getDisplayName();
      }
    }

    return theme('devconnect_monetization_catalogs_and_plans_list', $variables);
  } catch (\Apigee\Exceptions\ResponseException $re) {
    drupal_set_message(t('The website encountered an unexpected error. Please try again later.'), 'error');
    $config->logger->critical($re);
  }
  catch (\Exception $e) {
    drupal_set_message(t('The website encountered an unexpected error. Please try again later.'), 'error');
    $config->logger->critical($e);
  }
  return '';
}

/**
 * Page callback for:
 *    users/%devconnect_monetization_developer/monetization/packages/purchased
 *
 * @param \Apigee\Mint\Developer $developer
 * @return string
 */
function devconnect_monetization_purchased_plans(\Apigee\Mint\Developer $developer) {

  $config = devconnect_monetization_default_org_config();
  $developer_rate_plan = new DeveloperRatePlan($developer->getEmail(), $config);
  $purchased_plans = array();
  $developer_rate_plans = $developer_rate_plan->getList();
  foreach ($developer_rate_plans as $developer_rate_plan) {
    $rate_plan = $developer_rate_plan->getRatePlan();
    $package_id = $rate_plan->getMonetizationPackage()->getId();
    $rate_plan_id = $developer_rate_plan->getId();
    $org_timezone = new DateTimeZone($rate_plan->getOrganization()->getTimezone());
    $utc_timezone = new DateTimeZone('UTC');


    $start_date = DateTime::createFromFormat('Y-m-d H:i:s', $developer_rate_plan->getStartDate(), $utc_timezone)
      ->setTimezone($org_timezone);

    $end_date = is_null($developer_rate_plan->getEndDate()) ? '--' : DateTime::createFromFormat('Y-m-d H:i:s', $developer_rate_plan->getEndDate(), $utc_timezone)
      ->setTimezone($org_timezone);

    $today = new DateTime('today', $org_timezone);

    if ($start_date > $today) {
      $action = l(t('Cancel'), 'users/' . $GLOBALS['user']->uid . '/monetization/packages/' . rawurlencode($rate_plan
          ->getMonetizationPackage()->getId()) . '/delete/' . rawurlencode($rate_plan_id),
        array('attributes' => array('class' => array('btn'))));
    }
    else {
      $action = '&nbsp;';
    }
    $purchased_plans[$package_id][$rate_plan_id] = array(
      'package' => $rate_plan->getMonetizationPackage()->getDisplayName(),
      'package_id' => $rate_plan->getMonetizationPackage()->getId(),
      'rate_plan' => $rate_plan->getDisplayName(),
      'rate_plan_id' => $rate_plan->getId(),
      'action' => $action,
      'start_date' => $start_date->setTimezone($org_timezone)->format('m-d-Y'),
      'end_date' => $end_date != '--' ? $end_date->setTimezone($org_timezone)->format('m-d-Y') : '--',
      'renewal_date' => strlen($developer_rate_plan->getRenewalDate()) ? DateTime::createFromFormat('Y-m-d H:i:s', $developer_rate_plan->getRenewalDate(), $utc_timezone)
          ->setTimezone($org_timezone)->format('m-d-Y') : '--',
      'products' => array(),
    );

    foreach ($rate_plan->getMonetizationPackage()->getProducts() as $product) {
      $purchased_plans[$package_id][$rate_plan_id]['products'][] = $product->getDisplayName();
    }
    $purchased_plans[$package_id][$rate_plan_id]['products'] = implode(', ', array_unique($purchased_plans[$package_id][$rate_plan_id]['products']));
  }

  // Sort purchased plans:
  // Start Date DESC
  // End Date ASC
  $sorted_purchased_plans = array();
  foreach ($purchased_plans as $package_id => $plans) {
    foreach ($plans as $plan) {
      $start_date = date_create_from_format('m-d-Y', $plan['start_date']);
      $end_date = date_create_from_format('m-d-Y', $plan['end_date']);
      if ($end_date !== FALSE // if plan date is set
        && $start_date <= $today // if plan was purchased today or before today
        && $end_date < $start_date // plan was also ended today
      ) {
        // Shift end_date to start_date
        // REF: COMMERCE-558
        $plan['end_date'] = $plan['start_date'];
      }
      $sorted_purchased_plans[] = $plan;
    }
  }

  usort($sorted_purchased_plans, function ($v1, $v2) {
    $v1_start_date = date_create_from_format('m-d-Y', $v1['start_date']);
    $v2_start_date = date_create_from_format('m-d-Y', $v2['start_date']);

    if ($v1_start_date < $v2_start_date) {
      return 1;
    }
    else {
      if ($v1_start_date > $v2_start_date) {
        return -1;
      }
      else {
        $v1_end_date = date_create_from_format('m-d-Y', $v1['end_date']);
        $v2_end_date = date_create_from_format('m-d-Y', $v2['end_date']);
        if ($v1_end_date === FALSE && $v2_end_date === FALSE) {
          return 0;
        }
        else {
          if ($v1_end_date === FALSE && $v2_end_date !== FALSE) {
            return 1;
          }
          else {
            if ($v1_end_date !== FALSE && $v2_end_date != FALSE) {
              return -1;
            }
            else {
              if ($v1_end_date < $v2_end_date) {
                return 1;
              }
              else {
                if ($v1_end_date > $v2_end_date) {
                  return -1;
                }
              }
              return 0;
            }
          }
        }
      }
    }
  });

  $variables['purchased_plans'] = $sorted_purchased_plans;
  return theme('devconnect_monetization_accepted_plans', $variables);
}

/**
 * Implements hook_theme()
 */
function devconnect_monetization_theme($existing, $type, $theme, $path) {
  $items = array();
  $template_path = drupal_get_path('module', 'devconnect_monetization') . '/templates';
  $items['devconnect_monetization_catalogs_and_plans_list'] = array(
    'template' => 'devconnect-monetization-catalogs-and-plans-list',
    'arguments' => array(),
    'path' => $template_path,
  );
  $items['devconnect_monetization_accepted_plans'] = array(
    'template' => 'devconnect-monetization-accepted-plans',
    'arguments' => array(),
    'path' => $template_path,
  );

  $items['devconnect_monetization_billing_docs'] = array(
    'template' => 'devconnect-monetization-billing-docs',
    'arguments' => array('docs' => array(), 'billing_documents_form' => ''),
    'path' => $template_path,
  );
  $items['devconnect_monetization_billing_prepaid_balance'] = array(
    'template' => 'devconnect-monetization-billing-prepaid-balance',
    'arguments' => array(
      'top_up_balance_perm' => FALSE,
      'has_balances' => FALSE,
      'balances' => array(),
      'download_prepaid_report_perm' => FALSE,
      'can_top_up_another_currency' => FALSE,
      'top_up_balance_form' => array(),
    ),
    'path' => $template_path,
  );
  $items['devconnect_monetization_top_up_balance'] = array(
    'template' => 'devconnect-monetization-top-up-balance',
    'render element' => 'form',
    'path' => $template_path,
  );

  $items['devconnect_monetization_company_users'] = array(
    'template' => 'devconnect-monetization-company-users',
    'arguments' => array(),
    'path' => $template_path,
  );
  $items['devconnect_monetization_company_tncs'] = array(
    'template' => 'devconnect-monetization-company-tncs',
    'arguments' => array('tncs_forms' => array()),
    'path' => $template_path,
  );
  $items['devconnect_monetization_product_detail'] = array(
    'template' => 'devconnect-monetization-product-detail',
    'arguments' => array('rate_plan' => NULL, 'rate_plan_detail' => NULL, 'product_list' => array()),
    'path' => $template_path,
  );
  $items['devconnect_monetization_developer_report_form'] = array(
    'template' => 'devconnect-monetization-developer-report-form',
    'render element' => 'form',
    'path' => $template_path,
  );
  $items['devconnect_monetization_roles_form'] = array(
    'render element' => 'form',
  );
  $items['devconnect_monetization_recurring_balances'] = array(
    'render element' => 'balances',
    'function' => 'theme_devconnect_monetization_recurring_balances',
  );

  $items['devconnect_monetization_rate_plan_form'] = array(
    'template' => 'devconnect-monetization-rate-plan-form',
    'render element' => 'form',
    'path' => $template_path . '/rate-plan-form',
  );
  $items['devconnect_monetization_rate_plan_form_limits'] = array(
    'template' => 'devconnect-monetization-rate-plan-form-limits',
    'path' => $template_path . '/rate-plan-form',
  );
  $items['devconnect_monetization_rate_plan_form_product'] = array(
    'template' => 'devconnect-monetization-rate-plan-form-product',
    'path' => $template_path . '/rate-plan-form',
  );
  $items['devconnect_monetization_rate_plan_form_price_points'] = array(
    'template' => 'devconnect-monetization-rate-plan-form-price-points',
    'path' => $template_path . '/rate-plan-form',
  );
  $items['devconnect_monetization_rate_plan_form_product_specific_package'] = array(
    'template' => 'devconnect-monetization-rate-plan-form-product-specific-package',
    'path' => $template_path . '/rate-plan-form',
  );
  $items['devconnect_monetization_plan_detail_comparison'] = array(
    'template' => 'devconnect-monetization-plan-detail-comparison',
    'arguments' => array(
      'active_plan_name'    => NULL,
      'active_plan_id'      => NULL,
      'plan_dates'          => array(
        'can_purchase' => array(),
        'can_end' => array(),
      ),
      'accepted_rate_plans' => array(),
      'rate_plans'          => array(),
    ),
    'path' => $template_path . '/rate-plan-form',
  );

  $items['devconnect_monetization_insuffient_funds_top_up_balance'] = array(
    'template' => 'devconnect-monetization-insuffient-funds-top-up-balance',
    'arguments' => array('form' => NULL),
    'render element' => 'form',
    'path' => $template_path . '/rate-plan-form',
  );

  $items['devconnect_monetization_conflicting_products'] = array(
    'arguments' => array(
      'products' => NULL,
    ),
    'file' => 'devconnect_monetization.plan.inc',
    'path' => drupal_get_path('module', 'devconnect_monetization'),
  );
  $items['devconnect_monetization_product_restriction'] = array(
    'template' => 'devconnect-monetization-product-restriction',
    'arguments' => array(),
    'path' => $template_path,
  );

  // Add backwards compatible themes
  _devconnect_monetization_old_themes($items);

  return $items;
}

/**
 * Provides support for old themes.
 * @param $items
 */
function _devconnect_monetization_old_themes(&$items) {
  $template_path = drupal_get_path('module', 'devconnect_monetization') . '/templates';
  $items['billing_prepaid_balance'] = $items['devconnect_monetization_billing_prepaid_balance'];
  $items['insuffient_funds_top_up_balance'] = array(
    'template' => 'insuffient_funds_top_up_balance',
    'arguments' => array(
      'top_up_balance_perm' => FALSE,
      'can_top_up_another_currency' => FALSE,
      'top_up_balance_form' => array(),
    ),
    'path' => $template_path,
  );
  $items['devconnect_monetization_insufficient_top_up_form_theme'] = $items['devconnect_monetization_insuffient_funds_top_up_balance'];
  $items['devconnect_monetization_conflicting_products_theme'] = $items['devconnect_monetization_conflicting_products'];
}

/**
 * Build the proper text to be displayed as limit.
 *
 * @param \Apigee\Mint\Limit $product_limit
 * @param string $pricing_type
 * @return string
 */
function _devconnect_monetization_build_limit_text(Limit $product_limit, $pricing_type = '') {
  static $sub_orgs;
  $limit_text = $product_limit->getQuotaLimit();
  if ($product_limit->getQuotaType() == QuotaType::SPEND_LIMIT && strlen($pricing_type) > 0) {
    $limit_text .= ' (' . strtolower($pricing_type) . ') ';
  }
  switch ($product_limit->getQuotaType()) {
    case QuotaType::CREDIT_LIMIT:
      $limit_text .= ' ' . t('credit limit') . ' ';
      break;
    case QuotaType::SPEND_LIMIT:
      $limit_text .= ' ' . t('spend limit') . ' ';
      break;
    case QuotaType::FEE_EXPOSURE:
      $limit_text .= ' ' . t('total charge') . ' ';
      break;
    case QuotaType::TRANSACTIONS:
      $limit_text .= ' ' . t('transactions') . ' ';
      break;
    case QuotaType::BALANCE:
      $limit_text .= ' ' . t('balance') . ' ';
      break;
  }
  if (in_array($product_limit->getApplication(), array('ANY', 'ALL'))) {
    $limit_text .= $product_limit->getApplication() == 'ANY' ? ' ' . t('per application') : ' ' . t('all applications');
  }
  else {
    if ($product_limit->getApplication() != NULL) {
      $developer_id = _devconnect_monetization_get_developer_id(TRUE);
      $app = new DeveloperApp(devconnect_monetization_default_org_config(), $developer_id);
      $apps = $app->getListDetail();
      foreach ($apps as $app) {
        if ($app->getAppId() == $product_limit->getApplication()) {
          $limit_text .= ' ' . t('for') . ' ' . $app->getName();
        }
      }
    }
  }
  if ($product_limit->getDeveloperCategory() == 'ANY') {
    $limit_text .= ' ' . t('per developer category');
  }
  if (!in_array($product_limit->getDurationType(), array('ANY', 'ALL'))) {
    $limit_text .= ' ' . t('per') . ' ' . strtolower($product_limit->getDurationType());
  }
  if ($product_limit->getMonetizationPackage() == 'ANY') {
    $limit_text .= ' ' . t('per monetization package');
  }
  if ($product_limit->getProduct() == 'ANY') {
    $limit_text .= ' ' . t('per product');
  }
  if ($product_limit->getSubOrganization() == 'ANY') {
    $limit_text .= ' ' . t('per sub organization');
  }
  else {
    if ($product_limit->getSubOrganization() != 'ALL' && strlen($product_limit->getSubOrganization())) {
      if (!isset($sub_orgs)) {
        $config = devconnect_monetization_default_org_config();
        $org = new Organization($config);
        $sub_orgs = $org->getOrganizationFamily($config->orgName);
      }
      $limit_text .= ' ' . t(' for ') . ' ' . $sub_orgs[$product_limit->getSubOrganization()]->getDescription();
    }
  }
  if ($product_limit->getUserId() == 'ANY') {
    $limit_text .= ' ' . t('per user');
  }
  if ($product_limit->getQuotaType() == QuotaType::SPEND_LIMIT) {
    $limit_text = $product_limit->getCurrency() . ' ' . $limit_text;
  }
  else {
    if ($product_limit->getQuotaType() == QuotaType::FEE_EXPOSURE) {
      $limit_text = $product_limit->getCurrency() . ' ' . $limit_text;
    }
  }
  if ($product_limit->getQuotaPeriodType() == QuotaPeriodType::ROLLING) {
    $limit_text .= ' ' . t('(rolling month)');
  }
  return $limit_text;
}

/**
 * Sorts rate plan rates
 *
 * @param $rate_plan_rates
 * @param bool $merge
 * @return array
 */
function _devconnect_monetization_sort_rate_plan_rates($rate_plan_rates, $merge = FALSE) {
  $rate_values = array();
  $rate_types = array();
  foreach ($rate_plan_rates as $rate_plan_rate) {
    if ($merge) {
      $rate_values[$rate_plan_rate->getType()][$rate_plan_rate->getStartUnit()] = $rate_plan_rate;
      if (!in_array($rate_plan_rate->getType(), $rate_types)) {
        $rate_types[] = $rate_plan_rate->getType();
      }
    }
    else {
      $rate_values[$rate_plan_rate->getStartUnit()] = $rate_plan_rate;
    }
  }
  if ($merge) {
    foreach ($rate_types as $rate_type) {
      ksort($rate_values[$rate_type]);
    }
  }
  else {
    ksort($rate_values);
  }
  return $rate_values;
}

/**
 * Return the proper text to be displayed depending on variable $metering_type
 *
 * @param \Apigee\Mint\DataStructures\RatePlanDetail $rate_plan_detail
 * @return string
 */
function _devconnect_monetization_get_rate_card($rate_plan_detail) {
  if (in_array($rate_plan_detail->getRatingParameter(), array(MeteringType::VOLUME, 'user'))) {
    $rate_card = NULL;
    switch ($rate_plan_detail->getMeteringType()) {
      case MeteringType::UNIT:
        $rate_card = t(' per transaction');
        break;
      case MeteringType::VOLUME:
      case MeteringType::STAIR_STEP:
        $rate_card = t(' Volume of transactions');
        break;
      default:
        //@TODO Should throw exception?
    }
  }
  else {
    $rate_card = $rate_plan_detail->getRatingParameter() . t(' in ') . $rate_plan_detail->getRatingParameterUnit();
  }
  return $rate_card;
}

/**
 * Generates text to be shown in catalog-package.tpl.php (not used anywhere else)
 *
 * @param \Apigee\Mint\RatePlan $rate_plan
 * @param Apigee\Mint\DataStructures\RatePlanDetail $rate_plan_detail
 */
function _devconnect_monetization_get_frequency_fee_text(RatePlan $rate_plan) {
  if ($rate_plan->getRecurringFee() > 0) {
    $text = $rate_plan->getCurrency()->getName() . '&nbsp;' . $rate_plan->getRecurringFee();
    if ($rate_plan->getFrequencyDuration() > 1) {
      $text .= t(' every ') . $rate_plan->getFrequencyDuration() . ' ' . strtolower($rate_plan->getFrequencyDurationType()) . t('s');
    }
    else {
      $text .= t(' per ') . strtolower($rate_plan->getFrequencyDurationType());
    }
    $extra = array();
    if ($rate_plan->isProrate()) {
      $extra[] = t('pro-rated');
    }
    $extra[] = $rate_plan->isAdvance() ? t('in advance') : t('in arrears');
    $text .= '&nbsp;(' . implode(', ', $extra) . ')';
    return $text;
  }
  else {
    return '--';
  }
}


/**
 * Generates text to be shown in catalog-package.tpl.php (not used anywhere else)
 *
 * @param Apigee\Mint\RatePlan $rate_plan
 */
function _devconnect_monetization_get_free_quantity_text_for_rate_plan_level(RatePlan $rate_plan) {
  if ($rate_plan->getFreemiumUnit() == 0 && $rate_plan->getFreemiumDuration() == 0) {
    return NULL;
  }
  if ($rate_plan->getFreemiumUnit() > 0) {
    $text = t('up to ') . $rate_plan->getFreemiumUnit() . t(' transactions ');
  }
  else {
    $text = t('Unlimited ');
  }
  if ($rate_plan->getFreemiumDuration() > 0) {
    $text .= strlen($text) > 0 ? t(' for the first ') : t(' first ');
    $time_type = strtolower($rate_plan->getFreemiumDurationType());
    $text .= $rate_plan->getFreemiumDuration() > 1 ? $rate_plan->getFreemiumDuration() . ' ' . strtolower($time_type) . t('s') : $time_type;
  }
  return strlen($text) > 0 ? $text : NULL;
}

/**
 * Generates text to be shown in devconnect-monetization-catalog-and-plan-list.tpl.php and devconnect-monetization-devconnect-monetization-devconnect-monetization-product-detail.tpl.php
 * (not used anywhere else)
 *
 * @param Apigee\Mint\DataStructures\RatePlanDetail $rate_plan_detail
 * @param Apigee\Mint\RatePlan
 * @return string
 */
function _devconnect_monetization_get_free_quantity_text(RatePlanDetail $rate_plan_detail, RatePlan $rate_plan) {
  if ($rate_plan_detail->getFreemiumUnit() == 0 && $rate_plan_detail->getFreemiumDuration() == 0) {
    return NULL;
  }
  if ($rate_plan_detail->getFreemiumUnit() > 0) {
    $unit_type = in_array($rate_plan_detail->getRatingParameter(), array(
      MeteringType::VOLUME,
      'user'
    )) ? t(' transactions ') : $rate_plan_detail->getRatingParameterUnit();
    $text = t('up to ') . $rate_plan_detail->getFreemiumUnit() . ' ' . $unit_type;
  }
  else {
    $text = t('Unlimited ');
  }
  if ($rate_plan_detail->getFreemiumDuration() > 0) {
    $text .= strlen($text) > 0 ? t(' for the first ') : t(' first ');
    $time_type = strtolower($rate_plan_detail->getFreemiumDurationType());
    $text .= $rate_plan_detail->getFreemiumDuration() > 1 ? $rate_plan_detail->getFreemiumDuration() . ' ' . strtolower($time_type) . t('s') : $time_type;
  }
  if (strlen($text) && $rate_plan->isGroupPlan()) {
    $organization = new ManagementAPIOrganization(devconnect_monetization_default_org_config());
    $organization->load(NULL);
    $is_operator = $organization->getProperty('ui.config.isOperator');
    $is_operator = $is_operator === TRUE || strtolower($is_operator) == 'true';
    $text .= t(' per local @feemium_level', array('@feemium_level' => $is_operator ? t('operator') : t('organization')));
  }
  return strlen($text) > 0 ? $text : NULL;
}

/**
 * Return the email used to query monetization apis
 *
 * @param bool $get_company_id
 *   If TRUE it will return the company id (email) if the user
 *   field field_mint_company_id is set to a valid email,
 *   otherwise it will return the currently logged in user's email
 * @return string
 *   Returns the developer email
 */
function _devconnect_monetization_get_developer_id($get_company_id = FALSE) {

  static $company_account_id;
  if ($get_company_id) {
    if (isset($company_account_id)) {
      return $company_account_id;
    }
    else {
      $account = entity_load_single('user', $GLOBALS['user']->uid);
      $company_id = isset($account->field_mint_company_id[LANGUAGE_NONE][0]['value'])
        ? $account->field_mint_company_id[LANGUAGE_NONE][0]['value'] : '';
      /*
       * Instead of validating if user is Financial Admin should check if user is
       * granted some permissions?
       */
      if (valid_email_address($company_id)) {
        $company_account_id = $company_id;
      }
      else {
        $company_account_id = $GLOBALS['user']->mail;
      }
      return $company_account_id;
    }
  }
  else {
    return $GLOBALS['user']->mail;
  }
}

/**
 * Implements hook_form_FORM_ID_alter for devconnect_developer_apps_edit_form
 */
function devconnect_monetization_form_devconnect_developer_apps_edit_form_alter(&$form, &$form_state) {
  $form['non-accepted-product'] = array(
    '#markup' => theme('devconnect_monetization_product_restriction'),
  );

  $settings = array(
    'verify_accepted_url' => MONETIZATION_PRODUCT_VERIFY_ACCEPTED_URL,
  );

  drupal_add_js(array('devconnect_monetization_developer_apps_form' => $settings), 'setting');
  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'devconnect_monetization') . '/js/api-products.js',
    'type' => 'file',
  );
  // If attempted to by pass a monetized product that has not been purchased that has
  // been validated by this hook_validate, then remove product from selected products
  // and output the error message
  if ($form_state['rebuild'] && isset($form_state['rebuild_info']['remove-api_products'])) {
    drupal_set_message(t("Error: %error", array('%error' => $form_state['rebuild_info']['remove-api_message'])), 'error');
    foreach ($form_state['rebuild_info']['remove-api_products'] as $product_id) {
      $composed_product_id = 'prod-' . $product_id;
      if (($index = array_search($composed_product_id, $form_state['input']['api_product'])) !== FALSE) {
        unset($form_state['input']['api_product'][$index]);
        unset($form_state['values']['api_product'][$composed_product_id]);
      }
    }
    unset($form_state['rebuild_info']['remove-api_message']);
    unset($form_state['rebuild_info']['remove-api_products']);
  }

  $form['#validate'][] = 'devconnect_monetization_form_devconnect_developer_apps_edit_form_validate';
}

/**
 * Validate that developer cannot add a product that does not belong to any plan the has purchased.
 * If not in a plan he has purchased then product is removed. Messaging is handled in client side
 */
function devconnect_monetization_form_devconnect_developer_apps_edit_form_validate(&$form, &$form_state) {
  $monetized_products = array();
  $developer = devconnect_monetization_developer_load($GLOBALS['user']->uid);
  foreach ($form_state['values']['api_product'] as $product_key => $composed_product_id) {
    $product_id = substr($composed_product_id, 5);
    if (!devconnect_monetization_allowed_product($product_id, $developer)) {
      $monetized_products[] = $product_id;
    }
  }
  if (!empty($monetized_products)) {
    $vars = array(
      '@products' => implode(', ', $monetized_products),
      '@plural' => count($monetized_products) > 1 ? 's' : ''
    );
    $form_state['rebuild'] = TRUE;
    $form_state['rebuild_info']['remove-api_products'] = $monetized_products;
    $form_state['rebuild_info']['remove-api_message'] = t('Product@plural @products is part of a monetized package. You need to purchase a plan from the Catalog before you can access this product. If you do not have the rights to purchase please contact someone with an admin or finance role.', $vars);
  }
  else {
    $form_state['rebuild'] = FALSE;
    unset($form_state['rebuild_info']['remove-api_products']);
    unset($form_state['rebuild_info']['remove-api_message']);
  }
}

/**
 * Determine if a developer can add product to its application. Product is accessible if is non-monetized
 * or developer has purchased a plan that contains that product.
 *
 * @param $product_id
 * @param Developer $developer
 *
 * @return bool
 *
 * @throws Apigee\Mint\Exceptions\MintApiException
 * @throws Exception
 */
function devconnect_monetization_allowed_product($product_id, \Apigee\Mint\Developer $developer) {

  static $products = array();

  if (in_array($product_id, $products)) {
    return TRUE;
  }
  else {
    $config = devconnect_monetization_default_org_config();
    try {
      $ratePlan = $developer->getRatePlanByProduct($product_id);
      foreach ($ratePlan->getMonetizationPackage()->getProducts() as $product) {
        $products[] = $product->getId();
      }
      return TRUE;
    } catch (MintApiException $e) {
      if ($e->getMintCode() == MintApiException::PRODUCT_NOT_PART_OF_ANY_MONETIZATION_PACKAGE) {
        return TRUE;
      }
      else {
        if ($e->getMintCode() == MintApiException::NO_CURRENT_PUBLISHABLE_ENTITY) {
          return FALSE;
        }
        else {
          throw $e;
        }
      }
    }
    catch (Exception $e) {
      $config->logger->critical($e);
    }
  }
  return FALSE;
}

/**
 * json callback to validate if a developer can add a product to an application, if and only if
 * he has purchased a plan that contains such product.
 *
 * @param \Apigee\Mint\Developer $developer
 * @param $product_id
 * @return array
 */
function devconnect_monetization_accepted_products(\Apigee\Mint\Developer $developer, $product_id) {

  $product_id = substr(rawurldecode($product_id), 5);
  $response = array(
    'product' => $product_id,
    'found' => devconnect_monetization_allowed_product($product_id, $developer),
  );

  if (!$response['found']) {
    $response['message'] = t('This product is part of a monetized package. You need to purchase a plan from the Catalog before you can access this product. If you do not have the rights to purchase please contact someone with an admin or finance role.');
  }
  return $response;
}

/**
 * Implements hook_permission() to provide a demonstration access string.
 */

function devconnect_monetization_permission() {
  return array(
    'access mint monetization' => array(
      'title' => t('Access Monetization'),
      'description' => t('Access to Catalogs & Plans.'),
    ),
    'purchase mint plan' => array(
      'title' => t('Purchase plan'),
      'description' => t('Allows a user to purchase a plan.')
    ),
    'delete mint plan' => array(
      'title' => t('Delete plan'),
      'description' => t('Allows a user to delete a plan.'),
    ),
    'end mint plan' => array(
      'title' => t('End a plan'),
      'description' => t('Allows a user to end a plan.'),
    ),
    // Company permissions
    'edit mint company profile' => array(
      'title' => t('Edit Company Profile'),
      'description' => t('Edit Company profile, Bank details, Terms & Conditions and Manage User Roles.'),
    ),
    'edit mint bank details' => array(
      'title' => t('Edit Bank Details'),
      'description' => t('Allow a developer to edit company bank details.'),
    ),
    'view mint terms and conditions' => array(
      'title' => t('View Terms & Conditions'),
      'description' => t('View organization\'s Terms & Conditions.'),
    ),
    'accept mint terms and conditions' => array(
      'title' => t('Accept Terms & Conditions'),
      'description' => t('Grant a user to accept an organization\'s T&Cs on behalf of the company.'),
    ),
    'edit mint developers roles' => array(
      'title' => t('Edit monetization developers\' roles'),
      'description' => t('Allow a user to edit monetization developers\' roles and add developers to a company.'),
    ),

    // Package permissions
    'view catalog and plans' => array(
      'title' => t('Access Catalogs & Plans'),
      'description' => t('Allows a user to access catalogs & plans pages.'),
    ),
    'list catalog' => array(
      'title' => t('List catalogs'),
      'description' => t('List catalogs and plans.'),
    ),
    'list purchased plans' => array(
      'title' => t('View purchased plans'),
      'description' => t('Allow a user to list purchased plans.')
    ),

    // Top up balance
    'top up mint balance' => array(
      'title' => t('Top up balance'),
      'description' => t('Allow developer to top up balance.'),
    ),
    'access mint prepaid reports' => array(
      'title' => t('Access prepaid reports'),
      'description' => t('Allow a user to access prepaid reports.'),
    ),
    'download mint prepaid report' => array(
      'title' => t('Download prepaid report'),
      'description' => t('Allow a developer to download a prepaid report.'),
    ),
    'download mint revenue report' => array(
      'title' => t('Download revenue report'),
      'description' => t('Allow a user to download a revenue report.'),
    ),
    'download mint billing documents' => array(
      'title' => t('Download billing documents'),
      'description' => t('Allow a user to download a billing document.')
    ),
    'access mint billing & reports' => array(
      'title' => t('Access Billing & Reports section'),
      'description' => t('Can download reports and top up balance.')
    ),
    'list mint company applications' => array(
      'title' => t('List company applications'),
      'description' => t('Allow a developer to list applications on behalf of the company.'),
    ),
    'view mint company application details' => array(
      'title' => t('View company application details'),
      'description' => t('Allow a developer to view an application details on behalf of the company.')
    ),
    'create mint company applications' => array(
      'title' => t('Create company applications'),
      'description' => t('Allow a developer to create an application on behalf of the company.'),
    ),
    'edit mint company applications' => array(
      'title' => t('Edit company applications'),
      'description' => t('Allow a developer to edit an application on behalf of the company.'),
    ),
    'remove mint company applications' => array(
      'title' => t('Remove company applications'),
      'description' => t('Allow a developer to remove an application on behalf of the company.'),
    ),
    'add mint product to application' => array(
      'title' => t('Add application product'),
      'description' => t('Callback access control for validation when a users creates or edits an app, this should always be enabled for monetization users.'),
    ),
  );
}

function devconnect_monetization_admin_permissions() {
  return devconnect_monetization_permission() + array(
    'access checkout' => 'access checkout',
  );
}

function devconnect_monetization_finance_permissions() {
  $permissions = devconnect_monetization_permission() + array(
      'access checkout' => 'access checkout',
    );
  unset($permissions['purchase mint plan']);
  unset($permissions['delete mint plan']);
  unset($permissions['end mint plan']);
  unset($permissions['edit mint company profile']);
  unset($permissions['view mint terms and conditions']);
  unset($permissions['accept mint terms and conditions']);
  unset($permissions['edit mint developers roles']);
  return $permissions;
}

function devconnect_monetization_developer_permissions() {
  $permissions = devconnect_monetization_permission();
  unset($permissions['access mint monetization']);
  unset($permissions['purchase mint plan']);
  unset($permissions['delete mint plan']);
  unset($permissions['end mint plan']);
  unset($permissions['edit mint company profile']);
  unset($permissions['edit mint bank details']);
  unset($permissions['view mint terms and conditions']);
  unset($permissions['accept mint terms and conditions']);
  unset($permissions['edit mint developers roles']);
  unset($permissions['top up mint balance']);
  unset($permissions['access mint prepaid reports']);
  unset($permissions['download mint prepaid report']);
  unset($permissions['download mint revenue report']);
  unset($permissions['download mint billing documents']);
  unset($permissions['access mint billing & reports']);
  return $permissions;
}

/**
 * Set default developer values
 *
 * @param array $edit
 * @param object $account
 * @param mixed $category
 */
function devconnect_monetization_user_presave(&$edit, $account, $category) {
  $default_role_id = variable_get('devconnect_monetization_default_role', variable_get('devconnect_monetization_role_' . MONETIZATION_ADMIN_ROLE_NAME, NULL));

  $original_roles = array(
    variable_get('devconnect_monetization_role_' . MONETIZATION_ADMIN_ROLE_NAME, NULL) => MONETIZATION_ADMIN_ROLE_NAME,
    variable_get('devconnect_monetization_role_' . MONETIZATION_FINANCE_ADMIN_ROLE_NAME, NULL) => MONETIZATION_FINANCE_ADMIN_ROLE_NAME,
    variable_get('devconnect_monetization_role_' . MONETIZATION_DEVELOPER_ROLE_NAME, NULL) => MONETIZATION_DEVELOPER_ROLE_NAME,
  );

  $default_role_names = user_role_load($default_role_id);

  // If user is new, then set default field values and default monetization role name
  if ($account->is_new) {
    $edit['field_mint_developer_type'][LANGUAGE_NONE][0]['value'] = isset($edit['field_mint_developer_type'][LANGUAGE_NONE][0]['value']) ? $edit['field_mint_developer_type'][LANGUAGE_NONE][0]['value'] : DeveloperType::UNTRUSTED;
    $edit['field_mint_billing_type'][LANGUAGE_NONE][0]['value'] = isset($edit['field_mint_billing_type'][LANGUAGE_NONE][0]['value']) ? $edit['field_mint_billing_type'][LANGUAGE_NONE][0]['value'] : BillingType::PREPAID;
    $edit['field_mint_is_broker'][LANGUAGE_NONE][0]['value'] = isset($edit['field_mint_is_broker'][LANGUAGE_NONE][0]['value']) ? $edit['field_mint_is_broker'][LANGUAGE_NONE][0]['value'] : 0;
    $edit['field_mint_has_self_billing'][LANGUAGE_NONE][0]['value'] = isset($edit['field_mint_has_self_billing'][LANGUAGE_NONE][0]['value']) ? $edit['field_mint_has_self_billing'][LANGUAGE_NONE][0]['value'] : 0;
    $edit['field_mint_rev_reprt_preferences'][LANGUAGE_NONE][0]['value'] = isset($edit['field_mint_rev_reprt_preferences'][LANGUAGE_NONE][0]['value']) ? $edit['field_mint_rev_reprt_preferences'][LANGUAGE_NONE][0]['value'] : json_encode(array());
    if (!isset($edit['field_mint_developer_roles'][LANGUAGE_NONE][0]['value'])) {
      $edit['field_mint_developer_roles'][LANGUAGE_NONE][0]['value'] = json_encode(array($original_roles[$default_role_id]));
    }
    $edit['roles'][$default_role_id] = 1;
  }
  // Assign selected monetization role names
  else {

    $role_ids = isset($edit['roles']) && is_array($edit['roles']) ? array_filter($edit['roles']) : array();

    $mint_roles = array();
    foreach ($original_roles as $rid => $role_name) {
      if (array_key_exists($rid, $role_ids)) {
        $mint_roles[] = $role_name;
      }
    }
    $edit['field_mint_developer_roles'][LANGUAGE_NONE][0]['value'] = json_encode(array($mint_roles));
  }
}

/**
 * Implements hook_form_alter()
 *
 * @param array $form
 * @param array $form_state
 * @param mixed $form_id
 */
function devconnect_monetization_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {
    // If monetization fields, then hide them from user
    case 'user_profile_form':
      $form['field_mint_company_id']['#access'] = FALSE;
      $form['field_mint_registration_id']['#access'] = FALSE;
      $form['field_mint_vat_tax_number']['#access'] = FALSE;
      $form['field_mint_approx_tax_rate']['#access'] = FALSE;
      $form['field_mint_developer_legal_name']['#access'] = FALSE;
      $form['field_mint_is_broker']['#access'] = FALSE;
      $form['field_mint_developer_type']['#access'] = FALSE;
      $form['field_mint_billing_type']['#access'] = FALSE;
      $form['field_mint_has_self_billing']['#access'] = FALSE;
      $form['field_mint_billing_profile']['#access'] = FALSE;
      $form['field_mint_supported_currency']['#access'] = FALSE;
      $form['field_mint_developer_phone']['#access'] = FALSE;
      $form['field_mint_developer_address']['#access'] = FALSE;
      $form['field_mint_developer_category']['#access'] = FALSE;
      $form['field_mint_developer_roles']['#access'] = FALSE;
      $form['field_mint_rev_reprt_preferences']['#access'] = FALSE;
      break;
  }
}

/**
 * Implements hook_commerce_checkout_router()
 */
function devconnect_monetization_commerce_checkout_router($order, $checkout_page) {
  if ($checkout_page['page_id'] == 'complete') {
    $amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
    $currency = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];

    $package_id = $order->data['purchase']['packageid'];
    $plan_id = $order->data['purchase']['planid'];

    drupal_set_message(t('You have topped up @amount to your balance.', array(
      '@amount' => commerce_currency_format($amount, $currency, $order, TRUE),
    )), 'status');

    if (isset($order->data['purchase'])) {

      $plan_name = $order->data['purchase']['plan_name'];
      $package_name = $order->data['purchase']['package_name'];

      if ($order->data['purchase']['complete']) {
        drupal_goto('users/' . $GLOBALS['user']->uid . '/monetization/packages/purchased');
      }
      else {
        drupal_set_message(t('Your current balance is not enough to purchase plan @plan_name from package @package.', array(
            '@plan_name' => $plan_name,
            '@package' => $package_name
          )),
          'warning');
        drupal_goto('users/' . $GLOBALS['user']->uid . '/monetization/packages/' . rawurlencode($package_id) . '/view', array('fragment' => 'tab_' . $plan_id));
      }
    }
    else {
      drupal_goto('users/' . $GLOBALS['user']->uid . '/monetization/billing/prepaid-balance');
    }
  }
}

/**
 * Implementation of hook_user_delete()
 *
 * If user is admin company, set its childreen developers company id to NULL
 * thus they are free to be added to another company
 *
 * @param $account
 */
function devconnect_monetization_user_delete($account) {
  static $fields;
  if (!isset($fields)) {
    $field_info = field_info_field('field_mint_company_id');
    $fields = array($field_info['id']);
  }
  $query = new EntityFieldQuery();
  $child_developers = $query
    ->entityCondition('entity_type', 'user')
    ->entityCondition('bundle', 'user')
    ->fieldCondition('field_mint_company_id', 'value', $account->mail, '=')
    ->execute();

  $child_ids = array_keys($child_developers['user']);
  $developers = !empty($child_ids) ? entity_load('user', $child_ids) : array();

  if (!empty($developers)) {
    foreach ($developers as $developer) {
      $developer->field_mint_company_id[LANGUAGE_NONE][0]['value'] = NULL;
      field_sql_storage_field_storage_write('user', $developer, 'update', $fields);
      cache_clear_all("field:user:" . $developer->uid, 'cache_field');
    }
  }
}

/**
 * It was supposed to be RUN by Drupal's job scheduler to clear monetization
 * api cache but, this is not left to hook_cron()
 * or any other hook_cron...() since we need to clear this cache on a minute basis
 * and cron only give us the opportunity to run at the minimum of an hour
 */
function devconnect_monetization_clear_api_cache() {
  // Lock so other requests will not clear cache at the same time
  // avoiding multiple cache clears
  $now = time();
  $run_every = variable_get('devconnect_monetization_clear_cache', 600);
  $last_run = variable_get('devconnect_monetization_clear_cache_last_run', NULL);
  // Test if can be a candidate request to clear cache
  if ($last_run == NULL || ($now - $last_run > $run_every)) {
    // Adquire the lock
    if (lock_acquire('devconnect_monetization_clear_api_cache', 3)) {
      // Read again last cache clear time
      $last_run = variable_get('devconnect_monetization_clear_cache_last_run', NULL);
      // Test again in case that other request had cleared cache right before
      if ($last_run == NULL || ($now - $last_run > $run_every)) {
        $cache_manager = CacheFactory::getCacheManager(NULL);
        $cache_manager->clear(NULL, TRUE);
        variable_set('devconnect_monetization_clear_cache_last_run', time());
      }
      lock_release('devconnect_monetization_clear_api_cache');
    }
  }
}

/**
 * Implements hook_flush_caches()
 */
function devconnect_monetization_flush_caches() {
  if (db_table_exists('cache_mint')) {
    return array(
      'cache_mint'
    );
  }
  return array();
}

/**
 * Implements hook_translated_menu_link_alter().
 *
 * Hide Monetization menu-link to users with no access to Monetization
 */
function devconnect_monetization_translated_menu_link_alter(&$item, $map) {
  static $mlid;
  if (!isset($mlid)) {
    $mlids = array_keys(variable_get('devconnect_monetization-menu-links', array()));
    if (count($mlids)) {
      $mlid = $mlids[0];
    }
  }
  if ($item['mlid'] == $mlid) {
    $item['access'] = user_access('access mint monetization')
      || _devconnect_monetization_access_billing()
      || _devconnect_monetization_access_company_profile();
  }
}

/**
 * Build rate plan details
 *
 * @param \Apigee\Mint\RatePlan $rate_plan
 * @param string $product_list
 * @return string
 */
function devconnect_monetization_build_rate_plan_details_output(\Apigee\Mint\RatePlan $rate_plan, $product_list) {
  $output = '';
  $processed_products = array();
  foreach ($rate_plan->getRatePlanDetails() as $rate_plan_detail) {
    if ($rate_plan->isGroupPlan() || $rate_plan_detail->getProduct() == NULL) {
      if ($rate_plan_detail->getProduct() == NULL || !in_array($rate_plan_detail->getProduct()->getId(), $processed_products)) {
        $output .= theme('devconnect_monetization_product_detail', array('rate_plan' => $rate_plan, 'rate_plan_detail' => $rate_plan_detail, 'product_list' => $product_list));
        if ($rate_plan_detail->getProduct() != NULL) {
          $processed_products[] = $rate_plan_detail->getProduct()->getId();
        }
        else {
          break;
        }
      }
    }
    elseif (!in_array($rate_plan_detail->getProduct()->getId(), $processed_products)) {
      $output .= theme('devconnect_monetization_product_detail', array('rate_plan' => $rate_plan, 'rate_plan_detail' => $rate_plan_detail, 'product_list' => $product_list));
      $processed_products[] = $rate_plan_detail->getProduct()->getId();
    }
  }
  return $output;
}

function devconnect_monetization_commerce_currency_info_alter(&$currencies, $languague) {
  $currencies['POINTS'] = array(
    'code' => 'POINTS',
    'symbol' => '',
    'name' => t('Points'),
    'decimals' => 0,
    'numeric_code' => '1000',
    'symbol_placement' => 'after',
    'code_placement' => '',
    'minor_unit' => t(''),
    'major_unit' => t(''),
  );
  $currencies['points'] = $currencies['POINTS'];
}

function devconnect_monetization_form_devconnect_admin_form_alter(&$form, &$form_state) {
  unset($form['devconnect_config_container']['devconnect_default_api_product']);
}

/**
 * Implement hook_purchase_plan_requirements()
 */
function devconnect_monetization_purchase_plan_requirements(Apigee\Mint\Developer $developer, Apigee\Mint\MonetizationPackage $package) {
  $messages = array();
  $has_address = FALSE;
  foreach ($developer->getAddresses() as $address) {
    if ($address->isPrimary()) {
      $has_address = TRUE;
    }
  }
  if (!$has_address) {
    $me = module_exists('me') ? 'me' : $GLOBALS['user']->uid;
    $link = l(t('company settings'), "users/{$me}/monetization/company/edit", array('attributes' => array('class' => 'accept plan requirement'), 'query' => array('return' => "users/{$me}/monetization/packages/" . rawurlencode($package->getId()) . '/view')));
    $messages['user_does_not_has_address'] = array(
      '#markup' => t('You need to complete !link in order to purchase a plan.', array('!link' => $link)),
      '#weight' => 3,
    );
    $_SESSION['return_here'] = 'users/' . $GLOBALS['user']->uid . '/monetization/packages/' . rawurlencode($package->getId()) . '/view';
  }
  else {
    $config = devconnect_monetization_default_org_config();
    $dev_terms_n_conditions = new TermAndCondition($config);
    $has_accepted_terms_n_conditions = $dev_terms_n_conditions->isAbleToPurchase($developer->getEmail());
    if (!$has_accepted_terms_n_conditions) {
      $me = module_exists('me') ? 'me' : $GLOBALS['user']->uid;
      $link = l(t('Terms and Conditions'), "users/{$me}/monetization/company/tncs", array('attributes' => array('class' => 'accept plan requirement'), 'query' => array('return' => "users/{$me}/monetization/packages/" . rawurlencode($package->getId()) . '/view')));
      $messages['user_has_not_accepted_terms_and_conditions'] = array(
        '#markup' => t('You must accept !link before purchasing a plan.', array('!link' => $link)),
      );
      $_SESSION['return_here'] = 'users/' . $GLOBALS['user']->uid . '/monetization/packages/' . rawurlencode($package->getId()) . '/view';
    }
  }

  return $messages;
}

/**
 * Menu callback to sync developers from 4G to Mint
 */
function devconnect_monetization_user_sync_from_4g_to_mint() {
  $config = devconnect_monetization_default_org_config();
  $org = new Organization($config);
  try {
    $response = $org->syncAllFrom4g();
    drupal_set_message(t('Sync completed.'));
    return '<pre>' . $response . '</pre>';
  }
  catch (Exception $e) {
    drupal_set_message(t('Syncing developers has encountered an error.'));
    $message = (method_exists($e, '__toString') ? (string)$e : $e->getMessage());
    devconnect_default_api_client()->logger->error($message);
  }
}

/**
 * Implement hook_help
 */
function devconnect_monetization_help($path, $arg) {
  switch ($path) {
    case 'admin/help#devconnect_monetization':
      return '<p>' .
                '<div>' . l(t('How  DevConnect Monetization works?'), 'http://apigee.com/docs/monetization/content/basics-monetization') . '</div>' .
                '<div>' . l(t('Need help configuring  DevConnect Monetization?'), 'http://apigee.com/docs/content/configure-monetization-developer-portal') . '</div>' .
        '</p>';
      break;
  }
}
